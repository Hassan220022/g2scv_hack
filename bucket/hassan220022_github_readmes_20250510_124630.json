{
  "Hassan220022/2-bit-alu": {
    "name": "2-bit-alu",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2025-05-08T20:34:52",
    "languages": [
      "HTML",
      "Python",
      "TypeScript"
    ],
    "readme": "# 2-Bit ALU Design and Implementation\n\nThis project provides a comprehensive implementation of a 2-bit Arithmetic Logic Unit (ALU) using discrete 7400 series logic gates. It includes detailed hardware implementation guides, software simulation, and testing procedures.\n\n## Project Overview\n\nAn Arithmetic Logic Unit (ALU) is a fundamental component of any CPU, responsible for performing various arithmetic and logical operations. This project implements a simplified 2-bit ALU that can perform the following operations:\n\n- Bitwise AND\n- Bitwise OR\n- Bitwise XOR\n- Addition with carry\n- Subtraction using 2's complement\n- NOT (1's complement)\n\n```mermaid\ngraph TD\n    subgraph \"ALU Block Diagram\"\n        A[Input A] --> ALU\n        B[Input B] --> ALU\n        S[Operation Select] --> ALU\n        ALU --> R[Result]\n        ALU --> C[Carry/Borrow]\n    end\n```\n\n## Project Contents\n\n### Documentation\n- `docs/project_report.md`: Detailed project report with theoretical background and analysis\n- `hardware_design/circuit_implementation.md`: Step-by-step hardware implementation guide\n\n### Software Simulation\n- `src/alu_simulator.py`: Command-line simulation of the 2-bit ALU operations\n- `src/alu_visualizer.py`: GUI-based visualization showing ALU operations and circuit diagrams\n\n## Getting Started\n\n### Software Requirements\n- Python 3.6 or higher\n- Tkinter (for GUI visualization)\n- NumPy (for numerical operations)\n\n### Hardware Requirements\n- Breadboard\n- Logic Gate ICs:\n  - 1× 7408 ([Datasheet](https://www.ti.com/lit/ds/symlink/sn7408.pdf)): Quad 2-input AND gates\n  - 1× 7432 ([Datasheet](https://www.ti.com/lit/ds/symlink/sn7432.pdf)): Quad 2-input OR gates\n  - 1× 7486 ([Datasheet](https://www.ti.com/lit/ds/symlink/sn7486.pdf)): Quad 2-input XOR gates\n  - 1× 7404 ([Datasheet](https://www.ti.com/lit/ds/symlink/sn7404.pdf)): Hex inverter (NOT gates)\n- 6× SPDT switches for inputs\n- 3× LEDs with appropriate resistors (330Ohm)\n- 6× 10kOhm pull-up resistors\n- 4× 0.1uF decoupling capacitors\n- Jumper wires\n- 5V power supply\n\n### Installation\n\n1. Clone this repository:\n   ```\n   git clone https://github.com/yourusername/2-bit-alu.git\n   cd 2-bit-alu\n   ```\n\n2. Install required dependencies:\n   ```\n   pip install -r requirements.txt\n   ```\n\n### Running the Simulator\n\n1. Run the command-line simulator:\n   ```\n   python src/alu_simulator.py\n   ```\n\n2. Run the GUI visualizer:\n   ```\n   python src/alu_visualizer.py\n   ```\n\n### Building the Hardware\n\nSee the detailed instructions in `hardware_design/circuit_implementation.md`.\n\nThe basic steps are:\n1. Set up the power supply for all ICs\n2. Connect input switches with pull-up resistors\n3. Wire the logic gates according to the operation implementation diagrams\n4. Connect the output LEDs through current-limiting resistors\n\n```mermaid\ngraph TD\n    subgraph \"Basic Hardware Assembly Workflow\"\n        A[Set Up Power] --> B[Mount ICs on Breadboard]\n        B --> C[Wire Input Switches]\n        C --> D[Connect Logic Gates]\n        D --> E[Add Multiplexer Logic]\n        E --> F[Connect Output LEDs]\n        F --> G[Test Each Operation]\n    end\n```\n\n## Operation Codes\n\nThe ALU uses a 2-bit operation selector:\n\n| Operation | Op Code (S1:S0) | Description |\n|-----------|---------|-------------|\n| AND       | 00      | Bitwise AND |\n| OR        | 01      | Bitwise OR  |\n| XOR/ADD   | 10      | Addition with carry |\n| NOT/SUB   | 11      | Subtraction with borrow |\n\n## Example Operations\n\n### AND Operation Example\n```\nA = 10 (binary)\nB = 11 (binary)\nResult = 10 (binary)\n```\n\n### Addition Example\n```\nA = 10 (binary, decimal 2)\nB = 01 (binary, decimal 1)\nResult = 11 (binary, decimal 3)\n```\n\n### Subtraction Example\n```\nA = 11 (binary, decimal 3)\nB = 01 (binary, decimal 1)\nResult = 10 (binary, decimal 2)\n```\n\n## Circuit Diagram\n\n```mermaid\ngraph LR\n    subgraph \"Simplified Circuit\"\n        A[Inputs A/B] --> OPS[\"Operation Circuits<br/>(AND/OR/XOR/NOT)\"]\n        OPS --> MUX[Multiplexer]\n        S[Op Select] --> MUX\n        MUX --> R[Result]\n    end\n```\n\nFor detailed circuit diagrams, see `hardware_design/circuit_implementation.md`.\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\n1. **No Power to ICs**\n   - Check +5V at pin 14 and GND at pin 7 of all ICs\n   - Verify power supply is providing 5V\n\n2. **Inconsistent Results**\n   - Add 0.1uF decoupling capacitors near each IC\n   - Check for floating inputs\n   - Verify pull-up resistors are properly connected\n\n3. **Switch Bounce Issues**\n   - Add debounce circuits (RC filters) to input switches\n\n## Video Demonstrations\n\n- [ALU Hardware Demo](https://youtube.com/example) (placeholder)\n- [Software Simulator Walkthrough](https://youtube.com/example) (placeholder)\n\n## Additional Resources\n\n- [Digital Logic Design Tutorial](https://www.tutorialspoint.com/digital_circuits/index.htm)\n- [Ben Eater's 8-bit Computer Series](https://www.youtube.com/watch?v=HyznrdDSSGM&list=PLowKtXNTBypGqImE405J2565dvjafglHU)\n- [Online Logic Circuit Simulator](https://logic.ly/)\n- [TTL Logic Databook](https://www.ti.com/lit/sg/sdyu001ab/sdyu001ab.pdf)\n- [Interactive Simulator](https://claude.ai/public/artifacts/ea8579f5-8a7f-4332-8920-95c36823ea32)\n\n## Project Extensions\n\nWant to extend this project? Here are some ideas:\n\n1. Expand to 4-bit or 8-bit ALU\n2. Add multiplication and division operations\n3. Create a PCB design instead of breadboard\n4. Connect to a simple control unit to create a basic CPU\n5. Implement using a modern FPGA instead of discrete logic\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgments\n\n- Course instructor and teaching assistants\n- Texas Instruments for 7400 series datasheets\n- Ben Eater's educational videos on digital logic"
  },
  "Hassan220022/ACPC_Grading_System_Server": {
    "name": "ACPC_Grading_System_Server",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-12-23T23:37:18",
    "languages": [],
    "readme": ""
  },
  "Hassan220022/ACPC_grading_System_Server_simulation": {
    "name": "ACPC_grading_System_Server_simulation",
    "description": "A simulation of an ACPC Grading System Server where multiple computers process incoming tasks. The system handles exponential interarrival and service times with a FIFO queue mechanism and calculates key performance metrics like average delay time, waiting time, and time-based average queue length.",
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-12-25T15:32:08",
    "languages": [
      "Python"
    ],
    "readme": "# ACPC Grading System Server Simulation\n\nThis project simulates an **ACPC Grading System Server** where multiple computers process incoming tasks (contest problem submissions). Tasks arrive at random intervals, each requiring a random (exponential) amount of service time. If no computer is available, the tasks wait in a queue until a computer becomes free.\n\n## Table of Contents\n\n- [Features](#features)  \n- [Requirements and Dependencies](#requirements-and-dependencies)  \n- [Installation](#installation)  \n- [Usage](#usage)  \n- [Simulation Details](#simulation-details)  \n- [Key Formulas](#key-formulas)  \n- [Project Structure](#project-structure)  \n- [Output and Metrics](#output-and-metrics)  \n- [Parameter Tuning](#parameter-tuning)  \n- [Interpreting Results](#interpreting-results)  \n- [Possible Extensions](#possible-extensions)  \n- [Troubleshooting](#troubleshooting)  \n- [References](#references)  \n- [License](#license)\n\n---\n\n## Features\n\n1. **Multiple Servers (Computers):**  \n   - The code simulates up to 10 computers (by default), each of which can handle one task at a time.\n\n2. **Exponential Interarrival and Service Times:**  \n   - Arrival times and service times are drawn from exponential distributions with configurable mean parameters.\n\n3. **FIFO Queue Mechanism:**  \n   - Tasks that arrive when no computer is free wait in a queue (First-In, First-Out).\n\n4. **Performance Metrics:**  \n   - Reports **average delay time** (time spent waiting in queue before service).  \n   - Reports **average waiting time** (time in queue + service time).  \n   - Reports **time-based average queue length**.\n\n5. **Event-Driven Elements:**  \n   - The simulator updates the clock by interarrival events and processes queued tasks whenever servers become free.\n\n---\n\n## Requirements and Dependencies\n\n- **Python 3.7+** (Tested on Python 3.7, 3.8, 3.9)  \n- Standard libraries:\n  - `random`  \n  - `math`  \n  - `collections.deque`\n\nNo additional third-party libraries are required.\n\n---\n\n## Installation\n\n1. **Clone or download** this repository to your local machine.  \n2. Ensure you have Python 3.7 or later installed.\n3. From your terminal, navigate to the project folder:\n   ```bash\n   cd path/to/acpc_grading_system_server_simulation\n   ```\n4. There is no special installation step; everything runs as is.\n\n---\n\n## Usage\n\nRun the simulation script directly via Python:\n\n```bash\npython3 simulation.py\n```\n\nWhere `simulation.py` is the name of the Python file containing the simulation code.\n\n### Configuring Simulation Parameters\n\nInside the script, you will see constants such as:\n\n```python\nNUM_COMPUTERS = 10      # Number of available computers\nSIMULATION_TIME = 18000 # 5 hours in seconds\nMEAN_INTERARRIVAL = 35  # Average interarrival time (seconds)\nMEAN_SERVICE_TIME = 42  # Average service time (seconds)\n```\n\nYou can edit these parameters to run experiments with different settings.\n\n---\n\n## Simulation Details\n\n1. **Interarrival Times**  \n   - Generated using an exponential distribution with mean `MEAN_INTERARRIVAL`.\n   - If `U ~ Uniform(0,1)`, then  \n     `T_arrival = - (MEAN_INTERARRIVAL) * ln(U)`.\n\n2. **Service Times**  \n   - Also exponentially distributed with mean `MEAN_SERVICE_TIME`.\n   - If `U' ~ Uniform(0,1)`, then  \n     `T_service = - (MEAN_SERVICE_TIME) * ln(U')`.\n\n3. **Queueing Mechanism**  \n   - Each time an arrival occurs, if a computer is free at that time, the task starts service immediately. Otherwise, it joins a FIFO queue.  \n   - When a computer completes a task or is found idle, any queued tasks are served in arrival order.\n\n4. **Time-Based Queue Length**  \n   - The code continuously accumulates an \"area under the queue length curve\" over time. Dividing that area by the total simulation time yields the time-averaged queue length. Formally, if `Q(t)` is the queue length at time `t`, then  \n     `L_q = (1 / T) * integral from 0 to T of Q(t) dt`,  \n     where `T` is the total simulation time (e.g., 5 hours).\n\n\n---\n\n## Key Formulas\n\nThe simulator uses several **key formulas** based on **queueing theory** and **exponential distributions**:\n\n1. **Exponential Distribution**  \n   - To generate an exponentially distributed random variable X with mean α:\n     - X = -α * ln(U), where U is a random variable uniformly distributed between 0 and 1.\n   - In this project:\n     - α = MEAN_INTERARRIVAL for interarrival times.  \n     - α = MEAN_SERVICE_TIME for service times.\n\n2. **Arrival Rate and Service Rate**  \n   - **Arrival rate**: λ = 1 / MEAN_INTERARRIVAL.  \n   - **Service rate** (per computer): μ = 1 / MEAN_SERVICE_TIME.  \n\n3. **Delay Time (D)**  \n   - For each task, **delay** = time spent waiting in the queue before service begins.  \n   - In code, if a task arrives at time a and begins service at time s, then  \n     - D = s - a.\n\n4. **Waiting Time (W)**  \n   - **Waiting time** = total time in system = **delay** + **service time**.  \n   - For a task that arrives at time a, begins service at s, and completes at c,  \n     - W = (s - a) + (c - s) = c - a.\n\n5. **Averaging Metrics**  \n   - After simulating all tasks (up to the 5-hour window), we compute:  \n     - Average Delay = (sum of all D_i) / (Number of tasks),\n     - Average Waiting Time = (sum of all W_i) / (Number of tasks).\n   - For **time-based** average queue length:\n     - Average Queue Length = (1 / T) * integral from 0 to T of Q(t) dt,\n     which the code approximates by summing up (queue length * Δt) over each event interval.\n\n---\n\n## Project Structure\n\n```\nacpc_grading_system_server_simulation/\n├── README.md                      # This README file\n├── simulation.py   # Main Python script\n└── ...\n```\n\n- **`simulation.py`**  \n  This file contains the entire simulation logic. Key sections include:\n  - **Initialization** of variables (e.g., `computers`, `queue`, accumulators).  \n  - **Main Loop** where arrivals are generated and tasks are processed.  \n  - **Statistics Computation** at the end (average delays, queue length, etc.).  \n  - **Result Output** printed to the console.\n\n---\n\n## Output and Metrics\n\nUpon completion, the script prints metrics like:\n\n```\nSimulation Results:\nTasks Processed: 1286\nAverage Delay Time: 10.65 seconds  (queue wait only)\nAverage Waiting Time: 52.33 seconds (delay + service)\nAverage Queue Length: 3.12 tasks   (time-based)\n```\n\n- **Tasks Processed**: The total number of tasks that arrived and were served within the simulation window.  \n- **Average Delay Time**: The mean time tasks spent waiting in the queue before service.  \n- **Average Waiting Time**: The mean total time in system (queue wait + service).  \n- **Time-Based Average Queue Length**: The mean number of tasks in the queue at any moment, over the entire simulation duration.\n\n---\n\n## Parameter Tuning\n\nBy default, the simulation is configured with:\n\n```python\nNUM_COMPUTERS = 10\nSIMULATION_TIME = 18000  # 5 hours\nMEAN_INTERARRIVAL = 35   # seconds\nMEAN_SERVICE_TIME = 42   # seconds\n```\n\nUnder these **lightly loaded** conditions, you might see very few tasks waiting in the queue. That is normal if the arrival rate is significantly lower than the system’s total service capacity.\n\n1. **If You Want a Busy System**  \n   - **Decrease** the `MEAN_INTERARRIVAL` (increasing arrival rate).  \n   - **Decrease** `NUM_COMPUTERS` or **increase** `MEAN_SERVICE_TIME` to reduce capacity.  \n   This can cause tasks to queue up and produce a higher average delay time.\n\n2. **If You Want the System to Overload**  \n   - Make `MEAN_INTERARRIVAL` even smaller (e.g., 5 seconds).  \n   - Reduce the number of computers (e.g., 3 or 4).  \n   When \\(\\lambda\\) exceeds total service capacity (\\(c \\cdot \\mu\\)), the queue grows large, and average waiting times can become very high.\n\n3. **If You Want a Very Lightly Loaded System**  \n   - **Increase** `MEAN_INTERARRIVAL` or **increase** `NUM_COMPUTERS`.  \n   - Tasks will rarely queue, and the reported average queue length may be near zero.\n\n---\n\n## Interpreting Results\n\n- **Zero (or Near-Zero) Delays and Queue Length**  \n  Indicates that the system is lightly loaded (\\(\\lambda <\\) total service capacity). This is not a bug—it just means the capacity is more than enough to handle arrivals.\n\n- **Large Delay and Waiting Time**  \n  Suggests that the arrival rate is close to or exceeds the total service capacity, leading to a busy or overloaded system. You may need more servers or faster service times to reduce congestion.\n\n- **Tasks Processed**  \n  If the number of tasks processed is significantly lower or higher than expected, remember the code stops accepting new arrivals at the 5-hour mark (`SIMULATION_TIME = 18000`). Computers may still finish processing tasks that arrived before the cutoff.\n\n---\n\n## Possible Extensions\n\n1. **Fully Event-Driven Simulation**  \n   - Include both arrivals and **service completions** as discrete events. This way, the clock can jump to either the next arrival or the next departure, rather than only at arrivals.\n\n2. **Statistical Confidence Intervals**  \n   - Run multiple **replications** of the simulation (with different random seeds) and compute confidence intervals for average delay, waiting time, and queue length.\n\n3. **Additional Metrics**  \n   - **Server Utilization**: The fraction of time each server (computer) is busy.  \n   - **Queue Length Distribution**: Histograms of how many tasks are in the queue over time.  \n   - **Maximum Queue Length**: The largest queue length observed within the simulation window.\n\n4. **Alternative Distributions**  \n   - Modify `exponential_random` to sample from other distributions (e.g., **Erlang**, **Weibull**, or **Lognormal**) for arrival or service processes.\n\n---\n\n## Troubleshooting\n\n- **No Output or Errors**  \n  Make sure you have Python 3.7+ installed and run `python3 simulation.py` from the correct directory.\n\n- **Simulation Takes Too Long or Appears to Hang**  \n  If you set a very high arrival rate, the queue can grow large, and the code may need to handle many tasks before reaching the simulation end time.\n\n- **Infinite or Very Large Metrics**  \n  If the system is overloaded (\\(\\lambda\\) > total service rate), in theory, the queue length and waiting times can grow unbounded. In practice, you may observe extremely large numbers.\n\n---\n## References\n\n- **Gross, D., & Harris, C. M. (2018).** *Fundamentals of Queueing Theory (5th ed.)*. Wiley.  \n  - [Wiley Link](https://www.wiley.com/en-us/Fundamentals%2Bof%2BQueueing%2BTheory%2C%2B5th%2BEdition-p-9781118943526)\n\n- **Allen, A. O. (1990).** *Probability, Statistics, and Queueing Theory with Computer Science Applications (2nd ed.)*. Academic Press.  \n  - [Internet Archive](https://archive.org/details/probabilitystati0000alle)\n\n- **MIT OpenCourseWare**: Lecture notes on queueing and exponential distributions.  \n  - [MIT OCW - Introduction to Probability](https://ocw.mit.edu/courses/res-6-012-introduction-to-probability-spring-2018/)\n\n- **Wikipedia: “Queueing theory.”**  \n  - [https://en.wikipedia.org/wiki/Queueing_theory](https://en.wikipedia.org/wiki/Queueing_theory)\n\nThese sources cover basic queueing theory (M/M/c queues, exponential arrivals and services, and performance metrics) on which this simulation project is based.\n\n---\n\n## License\n\nThis project is licensed under the [MIT License](LICENSE). You are free to modify and distribute the code, provided you include appropriate attribution.\n"
  },
  "Hassan220022/AirBnB_clone": {
    "name": "AirBnB_clone",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-07-18T21:49:41",
    "languages": [
      "Python",
      "HTML",
      "CSS"
    ],
    "readme": "# AirBnb Clone\n\n## Purpose To build a website similiar to AirBnB with HTML/CSS:\n* Learn the basics of HTML and css\n* Get familiar with syntax of both languages\n* Understand basic mobile responsive designs\n\n## How do I start it?\n* open any index.html documents. I suggest trying highest number.html\n\n## USAGE\n* hover pointer over locations and amenities to test dropdown\n* hover pointer over list of dropdown to check if items is highlighted and darker\n* hover pointer over to each place card to check if other cards will response by lowering opacity\n* check if cards will expand when in larger screen\n* hover pointer to each card AFTER reducing viewport/screen to mobile size, to see the cards will NOT expand\n\n## Responsive Elements\n* media queries for 3 breakpoints\n* transform for expand disabled when smaller\n* cards will align to single columns\n\n## Validation\n* All HTML/CSS files is validated using w3c_validator located in the same directory that check fors syntax or nesting errors\n\n```bash\n# Repo hierarchy\n├── AIRBNB\n├── AUTHORS\n├── console.py\n├── models\n│   ├── amenity.py\n│   ├── base_model.py\n│   ├── city.py\n│   ├── engine\n│   │   ├── file_storage.py\n│   │   └── __init__.py\n│   ├── __init__.py\n│   ├── place.py\n│   ├── review.py\n│   ├── state.py\n│   └── user.py\n├── README.md\n├── tests\n│   ├── __init__.py\n│   └── test_models\n│       ├── __init__.py\n│       ├── test_amenity.py\n│       ├── test_base_model.py\n│       ├── test_city.py\n│       ├── test_engine\n│       │   ├── __init__.py\n│       │   └── test_file_storage.py\n│       ├── test_place.py\n│       ├── test_review.py\n│       ├── test_state.py\n│       └── test_user.py\n└── web_static\n    ├── 0-index.html\n    ├── 1-index.html\n    ├── 2-index.html\n    ├── 3-index.html\n    ├── 4-index.html\n    ├── 5-index.html\n    ├── 6-index.html\n    ├── 7-index.html\n    ├── 8-index.html\n    ├── images\n    │   ├── icon.png\n    │   └── logo.png\n    ├── styles\n    │   ├── 2-common.css\n    │   ├── 2-footer.css\n    │   ├── 2-header.css\n    │   ├── 3-common.css\n    │   ├── 3-footer.css\n    │   ├── 3-header.css\n    │   ├── 4-common.css\n    │   ├── 4-filters.css\n    │   ├── 5-filters.css\n    │   ├── 6-filters.css\n    │   ├── 7-filters.css\n    │   ├── 7-places.css\n    │   └── test.css\n    └── w3c_validator.py\n\n8 directories, 50 files\n```"
  },
  "Hassan220022/AirBnB_clone_v2": {
    "name": "AirBnB_clone_v2",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2025-04-02T13:08:49",
    "languages": [
      "Python",
      "HTML",
      "CSS",
      "Puppet",
      "Shell"
    ],
    "readme": "# AirBnB Clone - The Console\nThe console is the first segment of the AirBnB project at Holberton School that will collectively cover fundamental concepts of higher level programming. The goal of AirBnB project is to eventually deploy our server a simple copy of the AirBnB Website(HBnB). A command interpreter is created in this segment to manage objects for the AirBnB(HBnB) website.\n\n#### Functionalities of this command interpreter:\n* Create a new object (ex: a new User or a new Place)\n* Retrieve an object from a file, a database etc...\n* Do operations on objects (count, compute stats, etc...)\n* Update attributes of an object\n* Destroy an object\n\n## Table of Content\n* [Environment](#environment)\n* [Installation](#installation)\n* [File Descriptions](#file-descriptions)\n* [Usage](#usage)\n* [Examples of use](#examples-of-use)\n* [Bugs](#bugs)\n* [Authors](#authors)\n* [License](#license)\n\n## Environment\nThis project is interpreted/tested on Ubuntu 14.04 LTS using python3 (version 3.4.3)\n\n## Installation\n* Clone this repository: `git clone \"https://github.com/alexaorrico/AirBnB_clone.git\"`\n* Access AirBnb directory: `cd AirBnB_clone`\n* Run hbnb(interactively): `./console` and enter command\n* Run hbnb(non-interactively): `echo \"<command>\" | ./console.py`\n\n## File Descriptions\n[console.py](console.py) - the console contains the entry point of the command interpreter. \nList of commands this console current supports:\n* `EOF` - exits console \n* `quit` - exits console\n* `<emptyline>` - overwrites default emptyline method and does nothing\n* `create` - Creates a new instance of`BaseModel`, saves it (to the JSON file) and prints the id\n* `destroy` - Deletes an instance based on the class name and id (save the change into the JSON file). \n* `show` - Prints the string representation of an instance based on the class name and id.\n* `all` - Prints all string representation of all instances based or not on the class name. \n* `update` - Updates an instance based on the class name and id by adding or updating attribute (save the change into the JSON file). \n\n#### `models/` directory contains classes used for this project:\n[base_model.py](/models/base_model.py) - The BaseModel class from which future classes will be derived\n* `def __init__(self, *args, **kwargs)` - Initialization of the base model\n* `def __str__(self)` - String representation of the BaseModel class\n* `def save(self)` - Updates the attribute `updated_at` with the current datetime\n* `def to_dict(self)` - returns a dictionary containing all keys/values of the instance\n\nClasses inherited from Base Model:\n* [amenity.py](/models/amenity.py)\n* [city.py](/models/city.py)\n* [place.py](/models/place.py)\n* [review.py](/models/review.py)\n* [state.py](/models/state.py)\n* [user.py](/models/user.py)\n\n#### `/models/engine` directory contains File Storage class that handles JASON serialization and deserialization :\n[file_storage.py](/models/engine/file_storage.py) - serializes instances to a JSON file & deserializes back to instances\n* `def all(self)` - returns the dictionary __objects\n* `def new(self, obj)` - sets in __objects the obj with key <obj class name>.id\n* `def save(self)` - serializes __objects to the JSON file (path: __file_path)\n* ` def reload(self)` -  deserializes the JSON file to __objects\n\n#### `/tests` directory contains all unit test cases for this project:\n[/test_models/test_base_model.py](/tests/test_models/test_base_model.py) - Contains the TestBaseModel and TestBaseModelDocs classes\nTestBaseModelDocs class:\n* `def setUpClass(cls)`- Set up for the doc tests\n* `def test_pep8_conformance_base_model(self)` - Test that models/base_model.py conforms to PEP8\n* `def test_pep8_conformance_test_base_model(self)` - Test that tests/test_models/test_base_model.py conforms to PEP8\n* `def test_bm_module_docstring(self)` - Test for the base_model.py module docstring\n* `def test_bm_class_docstring(self)` - Test for the BaseModel class docstring\n* `def test_bm_func_docstrings(self)` - Test for the presence of docstrings in BaseModel methods\n\nTestBaseModel class:\n* `def test_is_base_model(self)` - Test that the instatiation of a BaseModel works\n* `def test_created_at_instantiation(self)` - Test created_at is a pub. instance attribute of type datetime\n* `def test_updated_at_instantiation(self)` - Test updated_at is a pub. instance attribute of type datetime\n* `def test_diff_datetime_objs(self)` - Test that two BaseModel instances have different datetime objects\n\n[/test_models/test_amenity.py](/tests/test_models/test_amenity.py) - Contains the TestAmenityDocs class:\n* `def setUpClass(cls)` - Set up for the doc tests\n* `def test_pep8_conformance_amenity(self)` - Test that models/amenity.py conforms to PEP8\n* `def test_pep8_conformance_test_amenity(self)` - Test that tests/test_models/test_amenity.py conforms to PEP8\n* `def test_amenity_module_docstring(self)` - Test for the amenity.py module docstring\n* `def test_amenity_class_docstring(self)` - Test for the Amenity class docstring\n\n[/test_models/test_city.py](/tests/test_models/test_city.py) - Contains the TestCityDocs class:\n* `def setUpClass(cls)` - Set up for the doc tests\n* `def test_pep8_conformance_city(self)` - Test that models/city.py conforms to PEP8\n* `def test_pep8_conformance_test_city(self)` - Test that tests/test_models/test_city.py conforms to PEP8\n* `def test_city_module_docstring(self)` - Test for the city.py module docstring\n* `def test_city_class_docstring(self)` - Test for the City class docstring\n\n[/test_models/test_file_storage.py](/tests/test_models/test_file_storage.py) - Contains the TestFileStorageDocs class:\n* `def setUpClass(cls)` - Set up for the doc tests\n* `def test_pep8_conformance_file_storage(self)` - Test that models/file_storage.py conforms to PEP8\n* `def test_pep8_conformance_test_file_storage(self)` - Test that tests/test_models/test_file_storage.py conforms to PEP8\n* `def test_file_storage_module_docstring(self)` - Test for the file_storage.py module docstring\n* `def test_file_storage_class_docstring(self)` - Test for the FileStorage class docstring\n\n[/test_models/test_place.py](/tests/test_models/test_place.py) - Contains the TestPlaceDoc class:\n* `def setUpClass(cls)` - Set up for the doc tests\n* `def test_pep8_conformance_place(self)` - Test that models/place.py conforms to PEP8.\n* `def test_pep8_conformance_test_place(self)` - Test that tests/test_models/test_place.py conforms to PEP8.\n* `def test_place_module_docstring(self)` - Test for the place.py module docstring\n* `def test_place_class_docstring(self)` - Test for the Place class docstring\n\n[/test_models/test_review.py](/tests/test_models/test_review.py) - Contains the TestReviewDocs class:\n* `def setUpClass(cls)` - Set up for the doc tests\n* `def test_pep8_conformance_review(self)` - Test that models/review.py conforms to PEP8\n* `def test_pep8_conformance_test_review(self)` - Test that tests/test_models/test_review.py conforms to PEP8\n* `def test_review_module_docstring(self)` - Test for the review.py module docstring\n* `def test_review_class_docstring(self)` - Test for the Review class docstring\n\n[/test_models/state.py](/tests/test_models/test_state.py) - Contains the TestStateDocs class:\n* `def setUpClass(cls)` - Set up for the doc tests\n* `def test_pep8_conformance_state(self)` - Test that models/state.py conforms to PEP8\n* `def test_pep8_conformance_test_state(self)` - Test that tests/test_models/test_state.py conforms to PEP8\n* `def test_state_module_docstring(self)` - Test for the state.py module docstring\n* `def test_state_class_docstring(self)` - Test for the State class docstring\n\n[/test_models/user.py](/tests/test_models/test_user.py) - Contains the TestUserDocs class:\n* `def setUpClass(cls)` - Set up for the doc tests\n* `def test_pep8_conformance_user(self)` - Test that models/user.py conforms to PEP8\n* `def test_pep8_conformance_test_user(self)` - Test that tests/test_models/test_user.py conforms to PEP8\n* `def test_user_module_docstring(self)` - Test for the user.py module docstring\n* `def test_user_class_docstring(self)` - Test for the User class docstring\n\n\n## Examples of use\n```\nvagrantAirBnB_clone$./console.py\n(hbnb) help\n\nDocumented commands (type help <topic>):\n========================================\nEOF  all  create  destroy  help  quit  show  update\n\n(hbnb) all MyModel\n** class doesn't exist **\n(hbnb) create BaseModel\n7da56403-cc45-4f1c-ad32-bfafeb2bb050\n(hbnb) all BaseModel\n[[BaseModel] (7da56403-cc45-4f1c-ad32-bfafeb2bb050) {'updated_at': datetime.datetime(2017, 9, 28, 9, 50, 46, 772167), 'id': '7da56403-cc45-4f1c-ad32-bfafeb2bb050', 'created_at': datetime.datetime(2017, 9, 28, 9, 50, 46, 772123)}]\n(hbnb) show BaseModel 7da56403-cc45-4f1c-ad32-bfafeb2bb050\n[BaseModel] (7da56403-cc45-4f1c-ad32-bfafeb2bb050) {'updated_at': datetime.datetime(2017, 9, 28, 9, 50, 46, 772167), 'id': '7da56403-cc45-4f1c-ad32-bfafeb2bb050', 'created_at': datetime.datetime(2017, 9, 28, 9, 50, 46, 772123)}\n(hbnb) destroy BaseModel 7da56403-cc45-4f1c-ad32-bfafeb2bb050\n(hbnb) show BaseModel 7da56403-cc45-4f1c-ad32-bfafeb2bb050\n** no instance found **\n(hbnb) quit\n```\n\n## Bugs\nNo known bugs at this time. \n\n## License\nPublic Domain. No copy write protection. \n"
  },
  "Hassan220022/AirBnB_clone_v3": {
    "name": "AirBnB_clone_v3",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-07-18T21:49:50",
    "languages": [
      "Python",
      "HTML",
      "CSS",
      "Shell"
    ],
    "readme": "# AirBnB Clone - The Console\nThe console is the first segment of the AirBnB project at Coding School that will collectively cover fundamental concepts of higher level programming. The goal of AirBnB project is to eventually deploy our server a simple copy of the AirBnB Website(HBnB). A command interpreter is created in this segment to manage objects for the AirBnB(HBnB) website.\n\n#### Functionalities of this command interpreter:\n* Create a new object (ex: a new User or a new Place)\n* Retrieve an object from a file, a database etc...\n* Do operations on objects (count, compute stats, etc...)\n* Update attributes of an object\n* Destroy an object\n\n## Table of Content\n* [Environment](#environment)\n* [Installation](#installation)\n* [File Descriptions](#file-descriptions)\n* [Usage](#usage)\n* [Examples of use](#examples-of-use)\n* [Bugs](#bugs)\n* [Authors](#authors)\n* [License](#license)\n\n## Environment\nThis project is interpreted/tested on Ubuntu 14.04 LTS using python3 (version 3.4.3)\n\n## Installation\n* Clone this repository: `git clone \"https://github.com/alexaorrico/AirBnB_clone.git\"`\n* Access AirBnb directory: `cd AirBnB_clone`\n* Run hbnb(interactively): `./console` and enter command\n* Run hbnb(non-interactively): `echo \"<command>\" | ./console.py`\n\n## File Descriptions\n[console.py](console.py) - the console contains the entry point of the command interpreter. \nList of commands this console current supports:\n* `EOF` - exits console \n* `quit` - exits console\n* `<emptyline>` - overwrites default emptyline method and does nothing\n* `create` - Creates a new instance of`BaseModel`, saves it (to the JSON file) and prints the id\n* `destroy` - Deletes an instance based on the class name and id (save the change into the JSON file). \n* `show` - Prints the string representation of an instance based on the class name and id.\n* `all` - Prints all string representation of all instances based or not on the class name. \n* `update` - Updates an instance based on the class name and id by adding or updating attribute (save the change into the JSON file). \n\n#### `models/` directory contains classes used for this project:\n[base_model.py](/models/base_model.py) - The BaseModel class from which future classes will be derived\n* `def __init__(self, *args, **kwargs)` - Initialization of the base model\n* `def __str__(self)` - String representation of the BaseModel class\n* `def save(self)` - Updates the attribute `updated_at` with the current datetime\n* `def to_dict(self)` - returns a dictionary containing all keys/values of the instance\n\nClasses inherited from Base Model:\n* [amenity.py](/models/amenity.py)\n* [city.py](/models/city.py)\n* [place.py](/models/place.py)\n* [review.py](/models/review.py)\n* [state.py](/models/state.py)\n* [user.py](/models/user.py)\n\n#### `/models/engine` directory contains File Storage class that handles JASON serialization and deserialization :\n[file_storage.py](/models/engine/file_storage.py) - serializes instances to a JSON file & deserializes back to instances\n* `def all(self)` - returns the dictionary __objects\n* `def new(self, obj)` - sets in __objects the obj with key <obj class name>.id\n* `def save(self)` - serializes __objects to the JSON file (path: __file_path)\n* ` def reload(self)` -  deserializes the JSON file to __objects\n\n#### `/tests` directory contains all unit test cases for this project:\n[/test_models/test_base_model.py](/tests/test_models/test_base_model.py) - Contains the TestBaseModel and TestBaseModelDocs classes\nTestBaseModelDocs class:\n* `def setUpClass(cls)`- Set up for the doc tests\n* `def test_pep8_conformance_base_model(self)` - Test that models/base_model.py conforms to PEP8\n* `def test_pep8_conformance_test_base_model(self)` - Test that tests/test_models/test_base_model.py conforms to PEP8\n* `def test_bm_module_docstring(self)` - Test for the base_model.py module docstring\n* `def test_bm_class_docstring(self)` - Test for the BaseModel class docstring\n* `def test_bm_func_docstrings(self)` - Test for the presence of docstrings in BaseModel methods\n\nTestBaseModel class:\n* `def test_is_base_model(self)` - Test that the instatiation of a BaseModel works\n* `def test_created_at_instantiation(self)` - Test created_at is a pub. instance attribute of type datetime\n* `def test_updated_at_instantiation(self)` - Test updated_at is a pub. instance attribute of type datetime\n* `def test_diff_datetime_objs(self)` - Test that two BaseModel instances have different datetime objects\n\n[/test_models/test_amenity.py](/tests/test_models/test_amenity.py) - Contains the TestAmenityDocs class:\n* `def setUpClass(cls)` - Set up for the doc tests\n* `def test_pep8_conformance_amenity(self)` - Test that models/amenity.py conforms to PEP8\n* `def test_pep8_conformance_test_amenity(self)` - Test that tests/test_models/test_amenity.py conforms to PEP8\n* `def test_amenity_module_docstring(self)` - Test for the amenity.py module docstring\n* `def test_amenity_class_docstring(self)` - Test for the Amenity class docstring\n\n[/test_models/test_city.py](/tests/test_models/test_city.py) - Contains the TestCityDocs class:\n* `def setUpClass(cls)` - Set up for the doc tests\n* `def test_pep8_conformance_city(self)` - Test that models/city.py conforms to PEP8\n* `def test_pep8_conformance_test_city(self)` - Test that tests/test_models/test_city.py conforms to PEP8\n* `def test_city_module_docstring(self)` - Test for the city.py module docstring\n* `def test_city_class_docstring(self)` - Test for the City class docstring\n\n[/test_models/test_file_storage.py](/tests/test_models/test_file_storage.py) - Contains the TestFileStorageDocs class:\n* `def setUpClass(cls)` - Set up for the doc tests\n* `def test_pep8_conformance_file_storage(self)` - Test that models/file_storage.py conforms to PEP8\n* `def test_pep8_conformance_test_file_storage(self)` - Test that tests/test_models/test_file_storage.py conforms to PEP8\n* `def test_file_storage_module_docstring(self)` - Test for the file_storage.py module docstring\n* `def test_file_storage_class_docstring(self)` - Test for the FileStorage class docstring\n\n[/test_models/test_place.py](/tests/test_models/test_place.py) - Contains the TestPlaceDoc class:\n* `def setUpClass(cls)` - Set up for the doc tests\n* `def test_pep8_conformance_place(self)` - Test that models/place.py conforms to PEP8.\n* `def test_pep8_conformance_test_place(self)` - Test that tests/test_models/test_place.py conforms to PEP8.\n* `def test_place_module_docstring(self)` - Test for the place.py module docstring\n* `def test_place_class_docstring(self)` - Test for the Place class docstring\n\n[/test_models/test_review.py](/tests/test_models/test_review.py) - Contains the TestReviewDocs class:\n* `def setUpClass(cls)` - Set up for the doc tests\n* `def test_pep8_conformance_review(self)` - Test that models/review.py conforms to PEP8\n* `def test_pep8_conformance_test_review(self)` - Test that tests/test_models/test_review.py conforms to PEP8\n* `def test_review_module_docstring(self)` - Test for the review.py module docstring\n* `def test_review_class_docstring(self)` - Test for the Review class docstring\n\n[/test_models/state.py](/tests/test_models/test_state.py) - Contains the TestStateDocs class:\n* `def setUpClass(cls)` - Set up for the doc tests\n* `def test_pep8_conformance_state(self)` - Test that models/state.py conforms to PEP8\n* `def test_pep8_conformance_test_state(self)` - Test that tests/test_models/test_state.py conforms to PEP8\n* `def test_state_module_docstring(self)` - Test for the state.py module docstring\n* `def test_state_class_docstring(self)` - Test for the State class docstring\n\n[/test_models/user.py](/tests/test_models/test_user.py) - Contains the TestUserDocs class:\n* `def setUpClass(cls)` - Set up for the doc tests\n* `def test_pep8_conformance_user(self)` - Test that models/user.py conforms to PEP8\n* `def test_pep8_conformance_test_user(self)` - Test that tests/test_models/test_user.py conforms to PEP8\n* `def test_user_module_docstring(self)` - Test for the user.py module docstring\n* `def test_user_class_docstring(self)` - Test for the User class docstring\n\n\n## Examples of use\n```\nvagrantAirBnB_clone$./console.py\n(hbnb) help\n\nDocumented commands (type help <topic>):\n========================================\nEOF  all  create  destroy  help  quit  show  update\n\n(hbnb) all MyModel\n** class doesn't exist **\n(hbnb) create BaseModel\n7da56403-cc45-4f1c-ad32-bfafeb2bb050\n(hbnb) all BaseModel\n[[BaseModel] (7da56403-cc45-4f1c-ad32-bfafeb2bb050) {'updated_at': datetime.datetime(2017, 9, 28, 9, 50, 46, 772167), 'id': '7da56403-cc45-4f1c-ad32-bfafeb2bb050', 'created_at': datetime.datetime(2017, 9, 28, 9, 50, 46, 772123)}]\n(hbnb) show BaseModel 7da56403-cc45-4f1c-ad32-bfafeb2bb050\n[BaseModel] (7da56403-cc45-4f1c-ad32-bfafeb2bb050) {'updated_at': datetime.datetime(2017, 9, 28, 9, 50, 46, 772167), 'id': '7da56403-cc45-4f1c-ad32-bfafeb2bb050', 'created_at': datetime.datetime(2017, 9, 28, 9, 50, 46, 772123)}\n(hbnb) destroy BaseModel 7da56403-cc45-4f1c-ad32-bfafeb2bb050\n(hbnb) show BaseModel 7da56403-cc45-4f1c-ad32-bfafeb2bb050\n** no instance found **\n(hbnb) quit\n```\n\n## Bugs\nNo known bugs at this time. \n\n\nSecond part of Airbnb: Joann Vuong\n## License\nPublic Domain. No copy write protection. \n\n\nThird part of Airbnb: Heindrick Cheung and Cuong Tran"
  },
  "Hassan220022/AirBnB_clone_v4": {
    "name": "AirBnB_clone_v4",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-07-18T21:47:06",
    "languages": [
      "HTML",
      "Less",
      "SCSS",
      "Python",
      "CSS",
      "JavaScript",
      "Ruby",
      "Makefile",
      "Shell"
    ],
    "readme": "<img src=\"https://github.com/jarehec/AirBnB_clone_v3/blob/master/dev/HBTN-hbnb-Final.png\" width=\"160\" height=auto />\n\n# AirBnB Clone: Phase # 4\n\nWeb dynamic with JQuery\n\n## Description\n\nProject attempts to clone the the AirBnB application and website, including the\ndatabase, storage, RESTful API, Web Framework, and Front End.  Currently the\napplication is designed to run with 2 storage engine models:\n\n* File Storage Engine:\n\n  * `/models/engine/file_storage.py`\n\n* Database Storage Engine:\n\n  * `/models/engine/db_storage.py`\n\n  * To Setup the DataBase for testing and development, there are 2 setup\n  scripts that setup a database with certain privileges: `setup_mysql_test.sql`\n  & `setup_mysql_test.sql` (for more on setup, see below).\n\n  * The Database uses Environmental Variables for tests.  To execute tests with\n  the environmental variables prepend these declarations to the execution\n  command:\n\n```\n$ HBNB_MYSQL_USER=hbnb_test HBNB_MYSQL_PWD=hbnb_test_pwd \\\nHBNB_MYSQL_HOST=localhost HBNB_MYSQL_DB=hbnb_test_db HBNB_TYPE_STORAGE=db \\\n[COMMAND HERE]\n```\n\n## Run the web_dynamic version\n\nTo run this inside vagrant, add those two lines to the Vagrantfile:\n```\nconfig.vm.network :forwarded_port, guest: 5000, host: 5000\nconfig.vm.network :forwarded_port, guest: 5001, host: 5001\n```\n\nThe API will run on port 5001 and the page will run on port 5000.\n\nIn a first terminal inside the repo, run the API:\n```\nHBNB_MYSQL_USER=hbnb_dev HBNB_MYSQL_PWD=hbnb_dev_pwd HBNB_MYSQL_HOST=localhost HBNB_MYSQL_DB=hbnb_dev_db HBNB_TYPE_STORAGE=db HBNB_API_PORT=5001 python3 -m api.v1.app\n```\n\nIn a second window inside the repo, run a page (for example 100-hbnb):\n```\nHBNB_MYSQL_USER=hbnb_dev HBNB_MYSQL_PWD=hbnb_dev_pwd HBNB_MYSQL_HOST=localhost HBNB_MYSQL_DB=hbnb_dev_db HBNB_TYPE_STORAGE=db HBNB_API_PORT=5000 python3 -m web_dynamic.100-hbnb\n```\n\nAll the web dynamic Flask scripts, HTML templates and Javascript scripts are in the foler [web_dynamic](./web_dynamic).\n\n## Environment\n\n* __OS:__ Ubuntu 14.04 LTS\n* __language:__ Python 3.4.3\n* __web server:__ nginx/1.4.6\n* __application server:__ Flask 0.12.2, Jinja2 2.9.6\n* __web server gateway:__ gunicorn (version 19.7.1)\n* __database:__ mysql Ver 14.14 Distrib 5.7.18\n* __documentation:__ Swagger (flasgger==0.6.6)\n* __style:__\n  * __python:__ PEP 8 (v. 1.7.0)\n  * __web static:__ [W3C Validator](https://validator.w3.org/)\n  * __bash:__ ShellCheck 0.3.3\n  * __javascript__: semistandard\n\n<img src=\"https://github.com/jarehec/AirBnB_clone_v3/blob/master/dev/hbnb_step5.png\" />\n\n## Setup\n\nThis project comes with various setup scripts to support automation, especially\nduring maintanence or to scale the entire project.  The following files are the\nsetupfiles along with a brief explanation:\n\n* **`dev/setup.sql`:** Drops test and dev databases, and then reinitializes\nthe datbase.\n\n  * Usage: `$ cat dev/setup.sql | mysql -uroot -p`\n\n* **`setup_mysql_dev.sql`:** initialiezs dev database with mysql for testing\n\n  * Usage: `$ cat setup_mysql_dev.sql | mysql -uroot -p`\n\n* **`setup_mysql_test.sql`:** initializes test database with mysql for testing\n\n  * Usage: `$ cat setup_mysql_test.sql | mysql -uroot -p`\n\n* **`0-setup_web_static.sh`:** sets up nginx web server config file & the file\n  structure.\n\n  * Usage: `$ sudo ./0-setup_web_static.sh`\n\n* **`3-deploy_web_static.py`:** uses 2 functions from (1-pack_web_static.py &\n  2-do_deploy_web_static.py) that use the fabric3 python integration, to create\n  a `.tgz` file on local host of all the local web static fils, and then calls\n  the other function to deploy the compressed web static files.  Command must\n  be executed from the `AirBnB_clone` root directory.\n\n  * Usage: `$ fab -f 3-deploy_web_static.py deploy -i ~/.ssh/holberton -u ubuntu`\n\n## Testing\n\n### `unittest`\n\nThis project uses python library, `unittest` to run tests on all python files.\nAll unittests are in the `./tests` directory with the command:\n\n* File Storage Engine Model:\n\n  * `$ python3 -m unittest discover -v ./tests/`\n\n* DataBase Storage Engine Model\n\n```\n$ HBNB_MYSQL_USER=hbnb_test HBNB_MYSQL_PWD=hbnb_test_pwd \\\nHBNB_MYSQL_HOST=localhost HBNB_MYSQL_DB=hbnb_test_db HBNB_TYPE_STORAGE=db \\\npython3 -m unittest discover -v ./tests/\n```\n\n---\n\n### All Tests\n\nThe bash script `init_test.sh` executes all these tests for both File Storage &\nDataBase Engine Models:\n\n  * checks `pep8` style\n\n  * runs all unittests\n\n  * runs all w3c_validator tests\n\n  * cleans up all `__pycache__` directories and the storage file, `file.json`\n\n  * **Usage `init_test.sh`:**\n\n```\n$ ./dev/init_test.sh\n```\n\n---\n\n### CLI Interactive Tests\n\n* This project uses python library, `cmd` to run tests in an interactive command\n  line interface.  To begin tests with the CLI, run this script:\n\n#### File Storage Engine Model\n\n```\n$ ./console.py\n```\n\n#### To execute the CLI using the Database Storage Engine Model:\n\n```\n$ HBNB_MYSQL_USER=hbnb_test HBNB_MYSQL_PWD=hbnb_test_pwd \\\nHBNB_MYSQL_HOST=localhost HBNB_MYSQL_DB=hbnb_test_db HBNB_TYPE_STORAGE=db \\\n./console.py\n```\n\n#### For a detailed description of all tests, run these commands in the CLI:\n\n```\n(hbnb) help help\nList available commands with \"help\" or detailed help with \"help cmd\".\n(hbnb) help\n\nDocumented commands (type help <topic>):\n========================================\nAmenity    City  Place   State  airbnb  create   help  show\nBaseModel  EOF   Review  User   all     destroy  quit  update\n\n(hbnb) help User\nclass method with .function() syntax\n        Usage: User.<command>(<id>)\n(hbnb) help create\ncreate: create [ARG] [PARAM 1] [PARAM 2] ...\n        ARG = Class Name\n        PARAM = <key name>=<value>\n                value syntax: \"<value>\"\n        SYNOPSIS: Creates a new instance of the Class from given input ARG\n                  and PARAMS. Key in PARAM = an instance attribute.\n        EXAMPLE: create City name=\"Chicago\"\n                 City.create(name=\"Chicago\")\n```\n\n* Tests in the CLI may also be executed with this syntax:\n\n  * **destroy:** `<class name>.destroy(<id>)`\n\n  * **update:** `<class name>.update(<id>, <attribute name>, <attribute value>)`\n\n  * **update with dictionary:** `<class name>.update(<id>,\n    <dictionary representation>)`\n\n---\n\n## License\n\nMIT License\n"
  },
  "Hassan220022/alx-higher_level_programming": {
    "name": "alx-higher_level_programming",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-12-31T00:24:45",
    "languages": [
      "Python",
      "C",
      "JavaScript",
      "Shell",
      "Makefile"
    ],
    "readme": "# alx-higher_level_programming\n"
  },
  "Hassan220022/alx-low_level_programming": {
    "name": "alx-low_level_programming",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2025-04-02T10:07:29",
    "languages": [
      "C",
      "Python",
      "Shell",
      "Assembly"
    ],
    "readme": "# alx-low_level_programming\n"
  },
  "Hassan220022/ALX-Portfolio-Project": {
    "name": "ALX-Portfolio-Project",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-06-28T05:30:45",
    "languages": [
      "JavaScript",
      "CSS",
      "HTML"
    ],
    "readme": "# Coronavirus - (COVID-19) Full Stack Application\nThe idea behind this application is to displays the statistics of Coronavirus COVID-19 around the world and the data are being collected from [Johns Hopkins University Center for Systems Science and Engineering JHU CSSE](https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data) and it updates the cases constantly on this website around the world. \n\n## Technical Overview\nThis is a full-stack application which runs react.js in front-end and node.js in the back-end and it parses the data from [JHU CSSE](https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data) and stored in MongoDB database.\n\nAnd it uses Mapbox to populate the coordinates on the map using GeoJSON format.\n\n<img src=\"Screenshots/covid19.png\"/>\n\n### MongoDB sample database import command\nAfter git clone import the dummy statistics into your local MongoDB database, which will help you to start the project.\n\n``````````````````````````\ngit clone https://github.com/anshumanpattnaik/covid19-full-stack-application.git\n\ncd covid19-full-stack-application\n\nmongod (Start MongoDB database)\n\nmongoimport --uri \"mongodb://127.0.0.1:27017/covid-19\" --collection covid_statistics --file dummy_statistics.json\n``````````````````````````\n\n### Server Installation\n``````````````````````````\ncd server \nnpm install\nnpm start\n``````````````````````````\nOpen [http://localhost:9000](http://localhost:9000) to view it in the browser.\n\n### Client Installation\n``````````````````````````\ncd client \nnpm install\nnpm start\n``````````````````````````\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\n### Change the constants values in Client app\n````````````````````````````````````````````````\nexport const BASE_URL = `http://YOUR_LOCAL_IP_ADDRESS:9000`;\nexport const MAPBOX_ACCESS_TOKEN = `YOUR_MAPBOX_API_TOKEN`;\n````````````````````````````````````````````````\n\n### MAPBOX Styles\nThese two below styles i have made public and it should work when you use your own MAPBOX_API_TOKEN\n````````````````````````````````````````````````\nmapbox://styles/hackbotone/ck8vtayrp0x5f1io3sakcmpnv\nmapbox://styles/hackbotone/ck8vt8vdj2fz91ilax6nwtins\n````````````````````````````````````````````````\n\n### Note\nIf you face any problem or have any suggestion on improving the code then feel free to raise an issue.\n"
  },
  "Hassan220022/alx-pre_course": {
    "name": "alx-pre_course",
    "description": "I'm now a ALX Student, this is my first repository as a full-stack engineer",
    "stars": 0,
    "forks": 0,
    "last_updated": "2023-10-05T16:50:44",
    "languages": [
      "Shell"
    ],
    "readme": "My first readme\n"
  },
  "Hassan220022/alx-system_engineering-devops": {
    "name": "alx-system_engineering-devops",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2025-04-02T13:20:02",
    "languages": [
      "Shell",
      "Python",
      "Puppet",
      "C",
      "Ruby"
    ],
    "readme": "## alx-system_engineering-devops\n"
  },
  "Hassan220022/alx-zero_day": {
    "name": "alx-zero_day",
    "description": "I'm now a ALX Student, this is my first repository as a full-stack engineer",
    "stars": 0,
    "forks": 0,
    "last_updated": "2023-10-07T07:20:56",
    "languages": [
      "Shell"
    ],
    "readme": "My first readme\n"
  },
  "Hassan220022/binary_trees": {
    "name": "binary_trees",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-07-18T21:49:55",
    "languages": [
      "C"
    ],
    "readme": "# C - Binary trees\n\nThis was a partner project in which we learned about the details, advantages,\nand disadvantages of using trees as data structures. We learned about how to\nqualify trees as well as how to traverse them. Throughout the project, we\nimplemented binary, binary search, AVL, and Max Binary Heap trees.\n\n## Tests :heavy_check_mark:\n\n* [Tester](./Main_tester): Folder of test files for all tasks. Provided by ALX.\n\n## Helper File :raised_hands:\n\n\n\n## Header File :file_folder:\n\n* [binary_trees.h](./binary_trees.h): Header file containing definitions and\nprototypes for all types and functions written for the project.\n\nData Structures\n```\nstruct binary_tree_s\n{\n    int n;\n    struct binary_tree_s *parent;\n    struct binary_tree_s *left;\n    struct binary_tree_s *right;\n};\n\ntypedef struct binary_tree_s binary_tree_t;\ntypedef struct binary_tree_s bst_t;\ntypedef struct binary_tree_s avl_t;\ntypedef struct binary_tree_s heap_t;\n```\n\nFunction Prototypes\n\n| File                             | Prototype                                                                                        |\n| -------------------------------- | ------------------------------------------------------------------------------------------------ |\n| `binary_tree_print.c`            | `void binary_tree_print(const binary_tree_t *tree)`                                              |\n| `0-binary_tree_node.c`           | `binary_tree_t *binary_tree_node(binary_tree_t *parent, int value);`                             |\n| `1-binary_tree_insert_left.c`    | `binary_tree_t *binary_tree_insert_left(binary_tree_t *parent, int value);`                      |\n| `2-binary_tree_insert_right.c`   | `binary_tree_t *binary_tree_insert_right(binary_tree_t *parent, int value);`                     |\n| `3-binary_tree_delete.c`         | `void binary_tree_delete(binary_tree_t *tree);`                                                  |\n| `4-binary_tree_is_leaf.c`        | `int binary_tree_is_leaf(const binary_tree_t *node);`                                            |\n| `5-binary_tree_is_root.c`        | `int binary_tree_is_root(const binary_tree_t *node);`\n| `6-binary_tree_preorder.c`       | `void binary_tree_preorder(const binary_tree_t *tree, void (*func)(int));`                       |\n| `7-binary_tree_inorder.c`        | `void binary_tree_inorder(const binary_tree_t *tree, void (*func)(int));`                        |\n| `8-binary_tree_postorder.c`      | `void binary_tree_postorder(const binary_tree_t *tree, void (*func)(int));`                      |\n| `9-binary_tree_height.c`         | `size_t binary_tree_height(const binary_tree_t *tree);`                                          |\n| `10-binary_tree_depth.c`         | `size_t binary_tree_depth(const binary_tree_t *tree);`                                           |\n| `11-binary_tree_size.c`          | `size_t binary_tree_size(const binary_tree_t *tree);`                                            |\n| `12-binary_tree_leaves.c`        | `size_t binary_tree_leaves(const binary_tree_t *tree);`                                          |\n| `13-binary_tree_nodes.c`         | `size_t binary_tree_nodes(const binary_tree_t *tree);`                                           |\n| `14-binary_tree_balance.c`       | `int binary_tree_balance(const binary_tree_t *tree);`                                            |\n| `15-binary_tree_is_full.c`       | `int binary_tree_is_full(const binary_tree_t *tree);`                                            |\n| `16-binary_tree_is_perfect.c`    | `int binary_tree_is_perfect(const binary_tree_t *tree);`                                         |\n| `17-binary_tree_sibling.c`       | `binary_tree_t *binary_tree_sibling(binary_tree_t *node);`                                       |\n| `18-binary_tree_uncle.c`         | `binary_tree_t *binary_tree_uncle(binary_tree_t *node);`                                         |\n| `100-binary_trees_ancestor.c`    | `binary_tree_t *binary_trees_ancestor(const binary_tree_t *first, const binary_tree_t *second);` |\n| `101-binary_tree_levelorder.c`   | `void binary_tree_levelorder(const binary_tree_t *tree, void (*func)(int));`                     |\n| `102-binary_tree_is_complete.c`  | `int binary_tree_is_complete(const binary_tree_t *tree);`                                        |\n| `103-binary_tree_rotate_left.c`  | `binary_tree_t *binary_tree_rotate_left(binary_tree_t *tree);`                                   |\n| `104-binary_tree_rotate_right.c` | `binary_tree_t *binary_tree_rotate_right(binary_tree_t *tree);`                                  |\n| `110-binary_tree_is_bst.c`       | `int binary_tree_is_bst(const binary_tree_t *tree);`                                             |\n| `111-bst_insert.c`               | `bst_t *bst_insert(bst_t **tree, int value);`                                                    |\n| `112-array_to_bst.c`             | `bst_t *array_to_bst(int *array, size_t size);`                                                  |\n| `113-bst_search.c`               | `bst_t *bst_search(const bst_t *tree, int value);`                                               |\n| `114-bst_remove.c`               | `bst_t *bst_remove(bst_t *root, int value);`                                                     |\n| `120-binary_tree_is_avl.c`       | `int binary_tree_is_avl(const binary_tree_t *tree);`                                             |\n| `121-avl_insert.c`               | `avl_t *avl_insert(avl_t **tree, int value);`                                                    |\n| `122-array_to_avl.c`             | `avl_t *array_to_avl(int *array, size_t size);`                                                  |\n\n## Tasks :page_with_curl:\n\n* **0. New node**\n  * [0-binary_tree_node.c](./0-binary_tree_node.c): C function that creates a\n  binary tree node with a given parent and value.\n  * Returns a pointer to the new node, or `NULL` on failure.\n\n* **1. Insert left**\n  * [1-binary_tree_insert](./1-binary_tree_insert): C function that inserts a\n  node as the left-child of another.\n  * Returns a pointer to the new node, or `NULL` on failure.\n  * If the given `parent` already contains a left node, the new node takes its\n  place and the old left-child becomes the left-child of the new node.\n\n* **2. Insert right**\n  * [2-binary_tree_insert_right.c](./2-binary_tree_insert_right.c): C function that\n  inserts a node as the right-child of another.\n  * Returns a pointer to the new node, or `NULL` on failure.\n  * If the given `parent` already contains a right node, the new node takes its\n  place and the old right-child becomes the right-child of the new node.\n\n* **3. Delete**\n  * [3-binary_tree_delete.c](./3-binary_tree_delete.c): C function that deletes\n  an entire binary tree.\n\n* **4. Is leaf**\n  * [4-binary_tree_is_leaf.c](./4-binary_tree_is_leaf.c): C function that checks\n  if a given node is a leaf.\n  * Returns `1` if the node is a leaf, `0` otherwise.\n\n* **5. Is root**\n  * [5-binary_tree_is_root.c](./5-binary_tree_is_root.c): C function that checks\n  if a given node is a root.\n  * Returns `1` if the node is a root, `0` otherwise.\n\n* **6. Pre-order traversal**\n  * [6-binary_tree_preorder.c](./6-binary_tree_preorder.c): C function that\n  traverses a tree using pre-order traversal.\n\n* **7. In-order traversal**\n  * [7-binary_tree_inorder.c](./7-binary_tree_inorder.c): C function that\n  traverses a tree using in-order traversal.\n\n* **8. Post-order traversal**\n  * [8-binary_tree_postorder.c](./8-binary_tree_postorder.c): C function that\n  traverses a tree using post-order traversal.\n\n* **9. Height**\n  * [9-binary_tree_height.c](./9-binary_tree_height.c): C function that returns\n  the height of a binary tree.\n\n* **10. Depth**\n  * [10-binary_tree_depth.c](./10-binary_tree_depth.c): C function that returns\n  the depth of a given node in a binary tree.\n\n* **11. Size**\n  * [11-binary_tree_size.c](./11-binary_tree_size.c): C function that returns\n  the size of a binary tree.\n\n* **12. Leaves**\n  * [12-binary_tree_leaves.c](./12-binary_tree_leaves.c): C function that returns\n  the number of leaves in a binary tree.\n\n* **13. Nodes**\n  * [13-binary_tree_nodes.c](./13-binary_tree_nodes.c): C function that returns\n  the number of nodes in a binary tree with at least one child.\n\n* **14. Balance factor**\n  * [14-binary_tree_balance.c](./14-binary_tree_balance.c): C function that\n  returns the balance factor of a binary tree.\n\n* **15. Is full**\n  * [15-binary_tree_is_full.c](./15-binary_tree_is_full.c): C function that\n  checks if a binary tree is full.\n  * Returns `1` if a tree is full, `0` otherwise.\n\n* **16. Is perfect**\n  * [16-binary_tree_is_perfect.c](./16-binary_tree_is_perfect.c): C function\n  that checks if a binary tree is perfect.\n  * Returns `1` if a tree is perfect, `0` otherwise.\n\n* **17. Sibling**\n  * [17-binary_tree_sibling.c](./17-binary_tree_sibling.c): C function that\n  returns a pointer to the sibling of a given node in a binary tree.\n  * Returns `NULL` if no sibling is found.\n\n* **18. Uncle**\n  * [18-binary_tree_uncle.c](./18-binary_tree_uncle.c): C function that\n  returns a pointer to the uncle of a given node in a binary tree.\n  * Returns `NULL` if no uncle is found.\n\n* **19. Lowest common ancestor**\n  * [100-binary_trees_ancestor.c](./100-binary_trees_ancestor.c): C function\n  that returns a pointer to the lowest common ancestor node of two given nodes\n  in a binary tree.\n  * Returns `NULL` if no common ancestor is found.\n\n* **20. Level-order traversal**\n  * [101-binary_tree_levelorder.c](./101-binary_tree_levelorder.c): C function\n  that traverses a binary tree using level-order traversal.\n\n* **21. Is complete**\n  * [102-binary_tree_is_complete.c](./102-binary_tree_is_complete.c): C function\n  that checks if a binary tree is complete.\n  * Returns `1` if the tree is complete, `0` otherwise.\n\n* **22. Rotate left**\n  * [103-binary_tree_rotate_left.c](./103-binary_tree_rotate_left.c): C function\n  that performs a left-rotation on a binary tree.\n  * Returns a pointer to the new root node of the tree after rotation.\n\n* **23. Rotate right**\n  * [104-binary_tree_rotate_right.c](./104-binary_tree_rotate_right.c): C function\n  that performs a right-rotation on a binary tree.\n  * Returns a pointer to the new root node of the tree after rotation.\n\n* **24. Is BST**\n  * [110-binary_tree_is_bst.c](./110-binary_tree_is_bst.c): C function that\n  checks if a binary tree is a valid binary search tree.\n  * Returns `1` if the tree is a valid BST, `0` otherwise.\n\n* **25. BST - Insert**\n  * [111-bst_insert.c](./111-bst_insert.c): C function that inserts a value into\n  a binary search tree.\n  * Returns a pointer to the new node, or `NULL` on failure.\n  * If the tree is `NULL`, the value becomes the root node.\n  * The value is ignored if it is already present in the tree.\n\n* **26. BST - Array to BST**\n  * [112-array_to_bst.c](./112-array_to_bst.c): C function that builds a binary\n  search tree from an array.\n  * Returns a pointer to the root node of the created tree, or `NULL` on failure.\n\n* **27. BST - Search**\n  * [113-bst_search.c](./113-bst_search.c): C function that searches for a value\n  in a binary search tree.\n  * If the value is matched in the BST, returns a pointer to the matched node.\n  * Otherwise, returns `NULL`.\n\n* **28. BST - Remove**\n  * [114-bst_remove.c](./114-bst_remove.c): C function that removes a node from\n  a binary search tree.\n  * Returns a pointer to the new root node of the tree after deletion.\n  * If the node to be deleted has two children, it is replaced with its first\n  in-order successor.\n\n* **29. Big O #BST**\n  * [115-O](./115-O): Text file containing the average time complexities of\n  binary search tree operations (one answer per line):\n    * Inserting the value `n`.\n    * Removing the node with the value `n`.\n    * Searching for a node in a BST of size `n`.\n\n* **30. Is AVL**\n  * [120-binary_tree_is_avl.c](./120-binary_tree_is_avl.c): C function that checks if\n  a binary tree is a valid AVL tree.\n  * If the tree is a valid AVL tree, returns `1`.\n  * Otherwise, returns `0`.\n\n* **31. AVL - Insert**\n  * [121-avl_insert.c](./121-avl_insert.c): C function that inserts a value in an AVL tree.\n  * Returns a value to the inserted node, or `NULL` on failure.\n\n* **32. AVL - Array to AVL**\n  * [122-array_to_avl.c](./122-array_to_avl.c): C function that builds an AVL tree\n  from an array.\n  * Returns a pointer to the root node of the created AVL tree, or `NULL` on failure.\n  * Ignores duplicate values.\n\n* **35. Big O #AVL Tree**\n  * [125-O](./125-O): Text file containing the average time complexities of AVL tree\n  opeartions (one answer per line):\n    * Inserting the value `n`.\n    * Removing the node with the value `n`.\n    * Searching for a node in an AVL tree of size `n`.\n\n* **41. Big O #Binary Heap**\n  * [135-O](./135-O): Text file containing the average time complexities of\n  binary heap opeartions (one answer per line):\n    * Inserting the value `n`.\n    * Extracting the root node.\n    * Searching for a node in a binary heap of size `n`.\n"
  },
  "Hassan220022/BIO_informatics_ASS2": {
    "name": "BIO_informatics_ASS2",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-04-21T00:07:34",
    "languages": [
      "Jupyter Notebook"
    ],
    "readme": ""
  },
  "Hassan220022/BIO_Project": {
    "name": "BIO_Project",
    "description": "Deep representation learning for disease prediction based on microbiome data",
    "stars": 1,
    "forks": 0,
    "last_updated": "2024-06-22T07:01:11",
    "languages": [
      "Python"
    ],
    "readme": "# DeepMicro\nDeepMicro is a deep representation learning framework exploiting various autoencoders to learn robust low-dimensional representations from high-dimensional data and training classification models based on the learned representation.\n\n## Quick Setup Guide\n\n**Step 1:** Change the current working directory to the location where you want to install `DeepMicro`.\n\n**Step 2:** Clone the repository using git command\n```\n https://github.com/Hassan220022/BIO_Project.git\n cd DeepMicro\n```\n**Step 3:** Create virtual environment using Anaconda3 ([Read Anaconda3 install guide](https://www.digitalocean.com/community/tutorials/how-to-install-anaconda-on-ubuntu-18-04-quickstart)) and activate the virtual environment\n```\n conda create --name deep_env python=3.6\n```\n```\n conda activate deep_env\n```\n**Step 4:** Install required packages, then install tensorflow.\n```\n pip install --upgrade pip && pip install numpy==1.16.2 && pip install pandas==0.24.2 && pip install scipy==1.2.1 && pip install scikit-learn==0.20.3 && pip install matplotlib==3.0.3 && pip install psutil==5.6.1 && pip install keras==2.2.4\n```\n* If your machine is *not* equipped with GPU, install tensorflow CPU version \n  ```\n   pip install tensorflow==1.13.1\n  ```\n* If it is equipped with GPU, then install tensorflow GPU version\n  ```\n   pip install tensorflow-gpu==1.13.1\n  ```\n**Step 5:** Run DeepMicro, printing out its usage.\n```\n python DM.py -h\n```\n\n## Quick Start Guide\n*Make sure you have already gone through the **Quick Setup Guide** above.*\n### Learning representation with your own data\n__1. Copy your data under the `/data` directory.__ Your data should be a comma separated file without header and index, where each row represents a sample and each column represents a microbe. We are going to assume that your file name is `UserDataExample.csv` which is already provided.\n\n__2. Check your data can be successfully loaded and verify its shape with the following command.__\n```\n python DM.py -r 1 --no_clf -cd UserDataExample.csv\n```\nThe output will show the number of rows and columns right next to `X_train.shape`. Our data `UserDataExample.csv` contains 80 rows and 200 columns.\n```\nUsing TensorFlow backend.\nNamespace(act='relu', ae=False, ae_lact=False, ae_oact=False, aeloss='mse', cae=False, custom_data='UserDataExample.csv', custom_data_labels=None, data=None, dataType='float64', data_dir='', dims='50', max_epochs=2000, method='all', no_clf=True, numFolds=5, numJobs=-2, patience=20, pca=False, repeat=1, rf_rate=0.1, rp=False, save_rep=False, scoring='roc_auc', seed=0, st_rate=0.25, svm_cache=1000, vae=False, vae_beta=1.0, vae_warmup=False, vae_warmup_rate=0.01)\nX_train.shape:  (80, 200)\nClassification task has been skipped.\n```\n    \n__3. Suppose that we want to reduce the number of dimensions of our data to 20 from 200 using a *shallow autoencoder*.__ Note that `--save_rep` argument will save your representation under the `/results` folder.\n```\n python DM.py -r 1 --no_clf -cd UserDataExample.csv --ae -dm 20 --save_rep\n```\n    \n__4. Suppose that we want to use *deep autoencoder* with 2 hidden layers which has 100 units and 40 units, respectively.__ Let the size of latent layer to be 20. We are going to see the structure of deep autoencoder first.\n```\n python DM.py -r 1 --no_clf -cd UserDataExample.csv --ae -dm 100,40,20 --no_trn\n```\nIt looks fine. Now, run the model and get the learned representation.\n```    \n python DM.py -r 1 --no_clf -cd UserDataExample.csv --ae -dm 100,40,20 --save_rep\n```\n__5. We can try *variational autoencoder* and * convolutional autoencoder* as well.__ Note that you can see detailed argument description by using `-h` argument.\n```\n python DM.py -r 1 --no_clf -cd UserDataExample.csv --vae -dm 100,20 --save_rep\n```\n```\n python DM.py -r 1 --no_clf -cd UserDataExample.csv --cae -dm 100,50,1 --save_rep\n```\n\n### Conducting binary classification after Learning representation with your own data\n__1. Copy your *data file* and *label file* under the `/data` directory.__ Your data file should be a comma separated value (CSV) format without header and index, where each row represents a sample and each column represents a microbe. __Your label file should contain a binary value (0 or 1) in each line and the number of lines should be equal to that in your data file.__ We are going to assume that your data file name is `UserDataExample.csv` and label file name is `UserLabelExample.csv` which are already provided.\n\n__2. Check your data can be successfully loaded and verify its shape with the following command.__\n```\n python DM.py -r 1 --no_clf -cd UserDataExample.csv -cl UserLabelExample.csv\n```\nOur data `UserDataExample.csv` consists of 80 samples each of which has 200 features. The data will be split into the training set and the test set (in 8:2 ratio). The output will show the number of rows and columns for each data set.\n```\nNamespace(act='relu', ae=False, ae_lact=False, ae_oact=False, aeloss='mse', cae=False, custom_data='UserDataExample.csv', custom_data_labels='UserLabelExample.csv', data=None, dataType='float64', data_dir='', dims='50', max_epochs=2000, method='all', no_clf=True, no_trn=False, numFolds=5, numJobs=-2, patience=20, pca=False, repeat=1, rf_rate=0.1, rp=False, save_rep=False, scoring='roc_auc', seed=0, st_rate=0.25, svm_cache=1000, vae=False, vae_beta=1.0, vae_warmup=False, vae_warmup_rate=0.01)\nX_train.shape:  (64, 200)\ny_train.shape:  (64,)\nX_test.shape:  (16, 200)\ny_test.shape:  (16,)\nClassification task has been skipped.\n```\n\n__3. Suppose that we want to directly apply SVM algorithm on our data without representation learning.__  Remove `--no_clf` command and specify classification method with `-m svm` argument (If you don't specify classification algorithm, all three algorithms will be running). \n```\n python DM.py -r 1 -cd UserDataExample.csv -cl UserLabelExample.csv -m svm\n```\nThe result will be saved under `/results` folder as a `UserDataExample_result.txt`. The resulting file will be growing as you conduct more experiments.\n\n__4. You can learn representation first, and then apply SVM algorithm on the learned representation.__\n```\n python DM.py -r 1 -cd UserDataExample.csv -cl UserLabelExample.csv --ae -dm 20 -m svm\n```\n\n__5. You can repeat the same experiment by changing seeds for random partitioning of training and test set.__  Suppose we want to repeat classfication task five times. You can do it by put 5 into `-r` argument.\n```\n python DM.py -r 5 -cd UserDataExample.csv -cl UserLabelExample.csv --ae -dm 20 -m svm\n```\n\n### Reproducing the experiments described in our paper\n__1. Unzip `abundance.zip` and `marker.zip` files under the `/data` directory.__ \n```\n cd data\n unzip abundance.zip && unzip marker.zip\n cd ..\n```\n__2. Specify dataset name to run.__ Choose dataset you want to run. You can choose one of the followings: `abundance_Cirrhosis`, `abundance_Colorectal`, `abundance_IBD`, `abundance_Obesity`, `abundance_T2D`, `abundance_WT2D`, `marker_Cirrhosis`, `marker_Colorectal`, `marker_IBD`, `marker_Obesity`, `marker_T2D`, `marker_WT2D`. Note that WT2D indicates European Women cohort (EW-T2D) and T2D indicates Chinese cohort (C-T2D).\n\n__3. Run experiments, specifying autoencoder details.__ \nSuppose we are going to run the best representation model on marker profile of EW-T2D dataset as shown in Table S1. Then, all three classification algorithms are trained and evaluated. We are going to repeat this process 5 times with the following command:\n```\n python DM.py -d marker_WT2D --ae -dm 256\n```\nNote that if you don't specify `-r` argument, it will repeat five times by default. We can use all available CPU cores when we train classification models by introducing `-t -1` argument.\n\nHere are another examples using a single classification algorithm.\n```\n python DM.py -d marker_T2D --cae -dm 4,2 -m mlp\n```\n```\n python DM.py -d abundance_Obesity --cae -dm 4,2 -m rf\n```\n```\n python DM.py -d marker_Colorectal --dae -dm 512,256,128 -m mlp\n```\n\nThe result will be saved under `/results` folder in a file whose name is ended with `_results.txt` (e.g. `marker_WT2D_result.txt`)\n\n## Citation\nOh, Min, and Liqing Zhang. \"DeepMicro: deep representation learning for disease prediction based on microbiome data.\" Scientific reports 10.1 (2020): 1-9.\n"
  },
  "Hassan220022/bolt.diy": {
    "name": "bolt.diy",
    "description": "Prompt, run, edit, and deploy full-stack web applications using any LLM you want!",
    "stars": 0,
    "forks": 0,
    "last_updated": "2025-02-22T09:44:41",
    "languages": [
      "TypeScript",
      "SCSS",
      "JavaScript",
      "Shell",
      "Dockerfile"
    ],
    "readme": "# bolt.diy (Previously oTToDev)\n\n[![bolt.diy: AI-Powered Full-Stack Web Development in the Browser](./public/social_preview_index.jpg)](https://bolt.diy)\n\nWelcome to bolt.diy, the official open source version of Bolt.new (previously known as oTToDev and bolt.new ANY LLM), which allows you to choose the LLM that you use for each prompt! Currently, you can use OpenAI, Anthropic, Ollama, OpenRouter, Gemini, LMStudio, Mistral, xAI, HuggingFace, DeepSeek, or Groq models - and it is easily extended to use any other model supported by the Vercel AI SDK! See the instructions below for running this locally and extending it to include more models.\n\n---\n\nCheck the [bolt.diy Docs](https://stackblitz-labs.github.io/bolt.diy/) for more offical installation instructions and more informations.\n\n---\n\nAlso [this pinned post in our community](https://thinktank.ottomator.ai/t/videos-tutorial-helpful-content/3243) has a bunch of incredible resources for running and deploying bolt.diy yourself!\n\nWe have also launched an experimental agent called the \"bolt.diy Expert\" that can answer common questions about bolt.diy. Find it here on the [oTTomator Live Agent Studio](https://studio.ottomator.ai/).\n\nbolt.diy was originally started by [Cole Medin](https://www.youtube.com/@ColeMedin) but has quickly grown into a massive community effort to build the BEST open source AI coding assistant!\n\n## Table of Contents\n\n- [Join the Community](#join-the-community)\n- [Requested Additions](#requested-additions)\n- [Features](#features)\n- [Setup](#setup)\n- [Run the Application](#run-the-application)\n- [Available Scripts](#available-scripts)\n- [Contributing](#contributing)\n- [Roadmap](#roadmap)\n- [FAQ](#faq)\n\n## Join the community\n\n[Join the bolt.diy community here, in the oTTomator Think Tank!](https://thinktank.ottomator.ai)\n\n## Project management\n\nBolt.diy is a community effort! Still, the core team of contributors aims at organizing the project in way that allows\nyou to understand where the current areas of focus are.\n\nIf you want to know what we are working on, what we are planning to work on, or if you want to contribute to the\nproject, please check the [project management guide](./PROJECT.md) to get started easily.\n\n## Requested Additions\n\n- ✅ OpenRouter Integration (@coleam00)\n- ✅ Gemini Integration (@jonathands)\n- ✅ Autogenerate Ollama models from what is downloaded (@yunatamos)\n- ✅ Filter models by provider (@jasonm23)\n- ✅ Download project as ZIP (@fabwaseem)\n- ✅ Improvements to the main bolt.new prompt in `app\\lib\\.server\\llm\\prompts.ts` (@kofi-bhr)\n- ✅ DeepSeek API Integration (@zenith110)\n- ✅ Mistral API Integration (@ArulGandhi)\n- ✅ \"Open AI Like\" API Integration (@ZerxZ)\n- ✅ Ability to sync files (one way sync) to local folder (@muzafferkadir)\n- ✅ Containerize the application with Docker for easy installation (@aaronbolton)\n- ✅ Publish projects directly to GitHub (@goncaloalves)\n- ✅ Ability to enter API keys in the UI (@ali00209)\n- ✅ xAI Grok Beta Integration (@milutinke)\n- ✅ LM Studio Integration (@karrot0)\n- ✅ HuggingFace Integration (@ahsan3219)\n- ✅ Bolt terminal to see the output of LLM run commands (@thecodacus)\n- ✅ Streaming of code output (@thecodacus)\n- ✅ Ability to revert code to earlier version (@wonderwhy-er)\n- ✅ Chat history backup and restore functionality (@sidbetatester)\n- ✅ Cohere Integration (@hasanraiyan)\n- ✅ Dynamic model max token length (@hasanraiyan)\n- ✅ Better prompt enhancing (@SujalXplores)\n- ✅ Prompt caching (@SujalXplores)\n- ✅ Load local projects into the app (@wonderwhy-er)\n- ✅ Together Integration (@mouimet-infinisoft)\n- ✅ Mobile friendly (@qwikode)\n- ✅ Better prompt enhancing (@SujalXplores)\n- ✅ Attach images to prompts (@atrokhym)(@stijnus)\n- ✅ Added Git Clone button (@thecodacus)\n- ✅ Git Import from url (@thecodacus)\n- ✅ PromptLibrary to have different variations of prompts for different use cases (@thecodacus)\n- ✅ Detect package.json and commands to auto install & run preview for folder and git import (@wonderwhy-er)\n- ✅ Selection tool to target changes visually (@emcconnell)\n- ✅ Detect terminal Errors and ask bolt to fix it (@thecodacus)\n- ✅ Detect preview Errors and ask bolt to fix it (@wonderwhy-er)\n- ✅ Add Starter Template Options (@thecodacus)\n- ✅ Perplexity Integration (@meetpateltech)\n- ✅ AWS Bedrock Integration (@kunjabijukchhe)\n- ⬜ **HIGH PRIORITY** - Prevent bolt from rewriting files as often (file locking and diffs)\n- ⬜ **HIGH PRIORITY** - Better prompting for smaller LLMs (code window sometimes doesn't start)\n- ⬜ **HIGH PRIORITY** - Run agents in the backend as opposed to a single model call\n- ⬜ Deploy directly to Vercel/Netlify/other similar platforms\n- ⬜ Have LLM plan the project in a MD file for better results/transparency\n- ⬜ VSCode Integration with git-like confirmations\n- ⬜ Upload documents for knowledge - UI design templates, a code base to reference coding style, etc.\n- ⬜ Voice prompting\n- ⬜ Azure Open AI API Integration\n- ⬜ Vertex AI Integration\n- ⬜ Granite Integration\n- ✅ Popout Window for Web Container(@stijnus)\n- ✅ Ability to change Popout window size (@stijnus)\n\n## Features\n\n- **AI-powered full-stack web development** for **NodeJS based applications** directly in your browser.\n- **Support for multiple LLMs** with an extensible architecture to integrate additional models.\n- **Attach images to prompts** for better contextual understanding.\n- **Integrated terminal** to view output of LLM-run commands.\n- **Revert code to earlier versions** for easier debugging and quicker changes.\n- **Download projects as ZIP** for easy portability.\n- **Integration-ready Docker support** for a hassle-free setup.\n\n## Setup\n\nIf you're new to installing software from GitHub, don't worry! If you encounter any issues, feel free to submit an \"issue\" using the provided links or improve this documentation by forking the repository, editing the instructions, and submitting a pull request. The following instruction will help you get the stable branch up and running on your local machine in no time.\n\nLet's get you up and running with the stable version of Bolt.DIY!\n\n## Quick Download\n\n[![Download Latest Release](https://img.shields.io/github/v/release/stackblitz-labs/bolt.diy?label=Download%20Bolt&sort=semver)](https://github.com/stackblitz-labs/bolt.diy/releases/latest) ← Click here to go the the latest release version!\n\n- Next **click source.zip**\n\n## Prerequisites\n\nBefore you begin, you'll need to install two important pieces of software:\n\n### Install Node.js\n\nNode.js is required to run the application.\n\n1. Visit the [Node.js Download Page](https://nodejs.org/en/download/)\n2. Download the \"LTS\" (Long Term Support) version for your operating system\n3. Run the installer, accepting the default settings\n4. Verify Node.js is properly installed:\n   - **For Windows Users**:\n     1. Press `Windows + R`\n     2. Type \"sysdm.cpl\" and press Enter\n     3. Go to \"Advanced\" tab → \"Environment Variables\"\n     4. Check if `Node.js` appears in the \"Path\" variable\n   - **For Mac/Linux Users**:\n     1. Open Terminal\n     2. Type this command:\n        ```bash\n        echo $PATH\n        ```\n     3. Look for `/usr/local/bin` in the output\n\n## Running the Application\n\nYou have two options for running Bolt.DIY: directly on your machine or using Docker.\n\n### Option 1: Direct Installation (Recommended for Beginners)\n\n1. **Install Package Manager (pnpm)**:\n\n   ```bash\n   npm install -g pnpm\n   ```\n\n2. **Install Project Dependencies**:\n\n   ```bash\n   pnpm install\n   ```\n\n3. **Start the Application**:\n\n   ```bash\n   pnpm run dev\n   ```\n   \n### Option 2: Using Docker\n\nThis option requires some familiarity with Docker but provides a more isolated environment.\n\n#### Additional Prerequisite\n\n- Install Docker: [Download Docker](https://www.docker.com/)\n\n#### Steps:\n\n1. **Build the Docker Image**:\n\n   ```bash\n   # Using npm script:\n   npm run dockerbuild\n\n   # OR using direct Docker command:\n   docker build . --target bolt-ai-development\n   ```\n\n2. **Run the Container**:\n   ```bash\n   docker compose --profile development up\n   ```\n\n## Configuring API Keys and Providers\n\n### Adding Your API Keys\n\nSetting up your API keys in Bolt.DIY is straightforward:\n\n1. Open the home page (main interface)\n2. Select your desired provider from the dropdown menu\n3. Click the pencil (edit) icon\n4. Enter your API key in the secure input field\n\n![API Key Configuration Interface](./docs/images/api-key-ui-section.png)\n\n### Configuring Custom Base URLs\n\nFor providers that support custom base URLs (such as Ollama or LM Studio), follow these steps:\n\n1. Click the settings icon in the sidebar to open the settings menu\n   ![Settings Button Location](./docs/images/bolt-settings-button.png)\n\n2. Navigate to the \"Providers\" tab\n3. Search for your provider using the search bar\n4. Enter your custom base URL in the designated field\n   ![Provider Base URL Configuration](./docs/images/provider-base-url.png)\n\n> **Note**: Custom base URLs are particularly useful when running local instances of AI models or using custom API endpoints.\n\n### Supported Providers\n\n- Ollama\n- LM Studio\n- OpenAILike\n\n## Setup Using Git (For Developers only)\n\nThis method is recommended for developers who want to:\n\n- Contribute to the project\n- Stay updated with the latest changes\n- Switch between different versions\n- Create custom modifications\n\n#### Prerequisites\n\n1. Install Git: [Download Git](https://git-scm.com/downloads)\n\n#### Initial Setup\n\n1. **Clone the Repository**:\n\n   ```bash\n   # Using HTTPS\n   git clone https://github.com/stackblitz-labs/bolt.diy.git\n   ```\n\n2. **Navigate to Project Directory**:\n\n   ```bash\n   cd bolt.diy\n   ```\n\n3. **Switch to the Main Branch**:\n   ```bash\n   git checkout main\n   ```\n4. **Install Dependencies**:\n\n   ```bash\n   pnpm install\n   ```\n\n5. **Start the Development Server**:\n   ```bash\n   pnpm run dev\n   ```\n\n#### Staying Updated\n\nTo get the latest changes from the repository:\n\n1. **Save Your Local Changes** (if any):\n\n   ```bash\n   git stash\n   ```\n\n2. **Pull Latest Updates**:\n\n   ```bash\n   git pull origin main\n   ```\n\n3. **Update Dependencies**:\n\n   ```bash\n   pnpm install\n   ```\n\n4. **Restore Your Local Changes** (if any):\n   ```bash\n   git stash pop\n   ```\n\n#### Troubleshooting Git Setup\n\nIf you encounter issues:\n\n1. **Clean Installation**:\n\n   ```bash\n   # Remove node modules and lock files\n   rm -rf node_modules pnpm-lock.yaml\n\n   # Clear pnpm cache\n   pnpm store prune\n\n   # Reinstall dependencies\n   pnpm install\n   ```\n\n2. **Reset Local Changes**:\n   ```bash\n   # Discard all local changes\n   git reset --hard origin/main\n   ```\n\nRemember to always commit your local changes or stash them before pulling updates to avoid conflicts.\n\n---\n\n## Available Scripts\n\n- **`pnpm run dev`**: Starts the development server.\n- **`pnpm run build`**: Builds the project.\n- **`pnpm run start`**: Runs the built application locally using Wrangler Pages.\n- **`pnpm run preview`**: Builds and runs the production build locally.\n- **`pnpm test`**: Runs the test suite using Vitest.\n- **`pnpm run typecheck`**: Runs TypeScript type checking.\n- **`pnpm run typegen`**: Generates TypeScript types using Wrangler.\n- **`pnpm run deploy`**: Deploys the project to Cloudflare Pages.\n- **`pnpm run lint:fix`**: Automatically fixes linting issues.\n\n---\n\n## Contributing\n\nWe welcome contributions! Check out our [Contributing Guide](CONTRIBUTING.md) to get started.\n\n---\n\n## Roadmap\n\nExplore upcoming features and priorities on our [Roadmap](https://roadmap.sh/r/ottodev-roadmap-2ovzo).\n\n---\n\n## FAQ\n\nFor answers to common questions, issues, and to see a list of recommended models, visit our [FAQ Page](FAQ.md).\n"
  },
  "Hassan220022/bor3i": {
    "name": "bor3i",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2025-05-10T08:40:01",
    "languages": [
      "Python",
      "C",
      "Cython",
      "XSLT",
      "C++",
      "Fortran",
      "SWIG",
      "PowerShell",
      "Roff",
      "Shell",
      "Meson",
      "JavaScript"
    ],
    "readme": ""
  },
  "Hassan220022/car_projcect": {
    "name": "car_projcect",
    "description": "Line Following Robot Project This project involves the creation of a line-following robot using an Arduino uno. The robot is designed to follow a predetermined path marked by a line on the ground or use the bluetooth module to control the car.",
    "stars": 0,
    "forks": 0,
    "last_updated": "2023-12-18T19:31:37",
    "languages": [
      "C++"
    ],
    "readme": "# Line Following Robot\n\nThis project is about a line following robot that uses an Arduino microcontroller. The robot uses infrared sensors to detect a line and follows it using a PID controller for precise movement.\n\n## Components\n\nThe main components of the robot include:\n\n- Arduino microcontroller\n- Infrared sensors\n- DC motors\n- Motor driver\n\n## How It Works\n\nThe robot uses two infrared sensors to detect a line. The sensors are positioned such that one is on each side of the line. The robot moves forward when both sensors detect the line. If the left sensor detects the line and the right sensor does not, the robot turns left. Conversely, if the right sensor detects the line and the left sensor does not, the robot turns right.\n\nThe speed of the motors is controlled using a PID controller. The PID controller takes the difference between the desired position (on the line) and the current position as input, and calculates the necessary adjustments to the motor speeds.\n\nThe robot also has a remote control mode, where it can be controlled using Bluetooth commands.\n\n## Code Structure\n\nThe code is structured into several functions:\n\n- `PID()`: This function calculates the error between the desired position and the current position, and adjusts the motor speeds using a PID controller.\n- `moveForward()`, `moveBackward()`, `turnRight()`, `turnLeft()`: These functions control the movement of the robot.\n- `stop()`: This function stops the robot.\n- `setup()`: This function sets up the Arduino pins and initializes the serial communication for the Bluetooth module.\n- `loop()`: This function is the main loop of the Arduino program. It checks for Bluetooth commands and controls the robot accordingly.\n\n## Usage\n\nUpload the code to your Arduino board using the Arduino IDE. Make sure to adjust the pin numbers and PID constants to match your hardware setup.\n\n## Note\n\nThe PID constants in the code are set using the Ziegler-Nichols tuning method. This method provides a good starting point, but the constants may need to be fine-tuned for your specific robot and environment.\n"
  },
  "Hassan220022/Cisco_final_project": {
    "name": "Cisco_final_project",
    "description": null,
    "stars": 1,
    "forks": 0,
    "last_updated": "2024-05-28T01:48:36",
    "languages": [
      "Python"
    ],
    "readme": "# Wide Area Network for Mock Bank - Project ReadMe\n\n## Project Overview\n\nThis project involves setting up a Wide Area Network (WAN) for a mock bank, which includes three Local Area Networks (LANs), one of which will be partitioned into two Virtual LANs (VLANs). The goal is to configure all network devices and endpoints to communicate efficiently across the entire WAN.\n\n## Requirements\n\n- Advanced knowledge of networking concepts and the Cisco IOS.\n- Use of Cisco Packet Tracer 8.2.1 or later.\n\n## Tools and Resources\n\n- Cisco Packet Tracer 8.2.1 or later.\n\n### Task 1: Design an IP Address Scheme\n\n1. Divide the 172.16.10.0/16 network into seven subnets.\n2. Determine the new subnet mask.\n3. Calculate the number of usable host addresses per subnet.\n4. Fill in the addressing table with the resulting subnets.\n\n### Task 2: Implement VLANs and Trunk\n\n1. Create and name VLANs:\n   - VLAN 10 – Management\n   - VLAN 20 – Marketing\n   - VLAN 30 – Accounting\n   - VLAN 100 – Native\n2. Configure the interfaces on S1-Office1 and S2-Office1 as \"Access\" mode and assign VLANs.\n3. Configure the interconnecting link between S1-Office1 and S2-Office1 as \"Trunk\".\n4. Verify the VLAN and trunk configurations using appropriate show commands and save the configuration.\n5. Disable DTP on the access ports of both switches.\n\n### Task 3: Assign IP Addresses\n\n1. Assign IP addresses to the subnets as planned.\n2. Document the IP address assignment in a separate file.\n3. Configure the Router-on-a-Stick setup for VLANs.\n4. Assign the default gateways for each VLAN.\n\n### Task 4: Configure R1 for Inter-VLAN Routing\n\n1. Enable GigabitEthernet 0/0.\n2. Create sub-interfaces on GigabitEthernet 0/0.\n3. Set the correct encapsulation type and VLAN ID for each sub-interface.\n4. Configure IP addresses and subnet masks.\n5. Verify the configuration using appropriate show commands and save it.\n6. Set GigabitEthernet 0/1 on S1-Office1 as Trunk with the appropriate Native VLAN.\n7. Test inter-VLAN routing by pinging between devices.\n\n### Task 5: Static Routing for Network Devices\n\n1. Configure IP addresses and subnet masks for all routers.\n2. Set up static routing on all routers.\n3. Configure a default route.\n\n### Task 6: Initial and Security Settings for Network Devices\n\n1. Create a user account with the following credentials:\n   - Username: Admin\n   - Password: ACDC1973\n2. Secure access to the console line.\n3. Secure privileged mode access with the password: beatles1960.\n4. Encrypt all passwords on the device.\n5. Configure a security message (MOTD Banner).\n\n### Task 7: Secure Remote Access\n\n1. Configure SSHv2 services on all routers.\n2. Set the IP domain name to AAST.com.\n3. Generate secure keys (minimum key length: 1024 bits).\n4. Configure VTY lines for SSH access.\n5. Verify the configuration using appropriate show commands.\n6. Configure the correct default gateway on the Admin PC and test SSH access.\n"
  },
  "Hassan220022/CodeAlpha_Project_Task-1": {
    "name": "CodeAlpha_Project_Task-1",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-02-15T07:48:55",
    "languages": [
      "Java"
    ],
    "readme": "# Student Grade Tracker\n\nThis is a simple Java program that allows a teacher to enter students' grades and compute their average, highest, and lowest scores. The student data is stored in an ArrayList for easy manipulation and computation.\n\n## Features\n\n- Add Student Grades: The teacher can add student grades one by one into the system.\n- Compute Average: The program can compute the average grade of all the students.\n- Find Highest Grade: The program can find the highest grade among all the students.\n- Find Lowest Grade: The program can find the lowest grade among all the students.\n\n## Usage\n\n1. Compile the Java file using the command `javac GradeTracker.java`.\n2. Run the compiled Java file using the command `java GradeTracker`.\n\n## Note\n\nThis is a simple program and does not include any error handling or data validation. It is recommended to add these features for a more robust application."
  },
  "Hassan220022/CodeAlpha_Project_Task-2": {
    "name": "CodeAlpha_Project_Task-2",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-02-15T08:22:06",
    "languages": [
      "Java"
    ],
    "readme": "# Simple Banking Application in Java\n\nThis is a beginner-friendly Java project that simulates a simple banking application. It covers fundamental concepts like the Scanner class for input, strings, loops, methods, and conditional statements.\n\n## Features\n\n- **Deposit:** Users can deposit money into their account.\n- **Withdrawal:** Users can withdraw money from their account.\n- **Check Balance:** Users can check the current balance of their account.\n- **Exit:** Users can exit the program.\n\n## Usage\n\n1. Compile the Java file using the command `javac SimpleBankingApplication.java`.\n2. Run the compiled Java file using the command `java SimpleBankingApplication`.\n\n## Learning Objectives\n\nThis project is ideal for coding beginners as it involves basic banking operations and fundamental Java concepts. By working on this project, you will gain a better understanding of how to use the Scanner class for input, manipulate strings, use loops and methods, and implement conditional statements.\n\n## Note\n\nThis is a simple program and does not include any error handling or data validation. It is recommended to add these features for a more robust application."
  },
  "Hassan220022/CodeAlpha_Project_Task-3": {
    "name": "CodeAlpha_Project_Task-3",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-02-15T08:22:22",
    "languages": [],
    "readme": "# CodeAlpha_Project_Task-3"
  },
  "Hassan220022/Compiler-Project": {
    "name": "Compiler-Project",
    "description": "A compiler is a crucial tool in software development, it is like a translator for computer programs, converting  high-level source code written by developers into machine code that computers can understand and execute. The  process of compilation is divided into several phases, and the first three are particularly significant.",
    "stars": 1,
    "forks": 0,
    "last_updated": "2023-12-25T02:54:02",
    "languages": [
      "C++",
      "C",
      "Makefile"
    ],
    "readme": "---\n\n# Compiler Project\n\nA compiler is an essential tool in software development, acting as a translator for high-level source code into machine-readable instructions. This project focuses on implementing a compiler for a For-loop statement, covering crucial phases of compilation.\n\n## General Phases\n\n### Phase 1 (Lexical Analyzer)\n\nIn this phase, the source code is transformed into a set of tokens, including reserved words, special symbols, numbers, identifiers, and comments.\n\n### Context-Free Grammar (CFG)\n\nTo progress to subsequent phases, a well-designed CFG is crucial. The CFG must be tailored to the specific structure of the given statement.\n\n### Phase 2 (Syntax Analyzer)\n\nThis phase emphasizes the code's structure, constructing an abstract syntax tree.\n\n### Phase 3 (Semantic Analyzer)\n\nChecking the code's meaning and context to ensure alignment with the language's semantics. These initial phases enable the compiler to comprehend the code's structure and meaning.\n\n### Example: `IF (X < Y) {X++}`\n\n- High-level language\n  - Lexical Analyzer (Tokenizer)\n  - Syntax Analyzer (CFG, Parser)\n  - Semantic Analyzer -> Semantic Tree\n\n## The Parser\n\nThis project requires a Parse Tree parser, providing a geometrical representation of the derived string.\n\n## The Statement\n\nThe specific statement implemented in this project is the For-loop statement.\n\n```c\nFor (int X = 0; X <= 100; X++) \n{\n    Sum += X;\n}\n```\n## SIC Machine\nThe Simplified Instructional Computer (SIC) machine is a hypothetical computer architecture introduced by Leland Beck. It's a simplified model used for educational purposes. The SIC machine includes various instructions and features to demonstrate fundamental concepts of computer organization and programming.\n\n## Requirements\n\n- Display inputs and outputs for each phase.\n- Print the designed CFG used by the parser.\n- Provide a brief project report, including:\n  - Simple pseudo-code or flowchart of the design.\n  - Screenshots of mentioned inputs and outputs.\n---\n"
  },
  "Hassan220022/curtain_final_project": {
    "name": "curtain_final_project",
    "description": "This project uses a PIC16F877A microcontroller to control a curtain system based on ambient light levels. The system employs two IR sensors to detect curtain positions and an LDR sensor to measure light intensity.",
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-05-27T22:48:57",
    "languages": [
      "C",
      "Makefile"
    ],
    "readme": "# Automatic Curtain Control System\r\n![Circuit Diagram](bor3i.png)\r\n\r\nThis project uses a PIC16F877A microcontroller to control a curtain system based on ambient light levels. The system employs two IR sensors to detect curtain positions and an LDR sensor to measure light intensity.\r\n\r\n## Components\r\n\r\n- PIC16F877A Microcontroller\r\n- L293D Motor Driver\r\n- IR Sensors (2x)\r\n- LDR Sensor\r\n- Motor\r\n- LCD Display\r\n\r\n## Circuit Diagram\r\n\r\nRefer to the provided circuit diagram for wiring instructions.\r\n\r\n## Pin Configuration\r\n\r\n- **IR_TOP**: RB0 (Pin 21)\r\n- **IR_BOTTOM**: RB1 (Pin 22)\r\n- **Motor Control Pins**: RD6 (Pin 15), RD7 (Pin 16)\r\n- **LDR Sensor**: AN0 (RA0, Pin 2)\r\n- **LCD**: Connected to PORTD (RD0 - RD5)\r\n\r\n## Setup\r\n\r\n1. Connect the IR sensors to RD0 and RD1.\r\n2. Connect the motor control pins to RD6 and RD7.\r\n3. Connect the LDR sensor to AN0 (RA0).\r\n4. Connect the LCD to PORTD (RB0 - RB5).\r\n5. Ensure the PIC16F877A is properly powered and connected.\r\n\r\n## Functionality\r\n\r\n- The system reads the light intensity using the LDR sensor.\r\n- If the light intensity is above a certain threshold, the curtain opens.\r\n- If the light intensity is below the threshold, the curtain closes.\r\n- The IR sensors ensure the curtain stops at the desired positions.\r\n\r\n## Code Explanation\r\n\r\n- `read_ldr()`: Reads the light intensity from the LDR sensor and returns the value.\r\n- `stopMotor()`: Stops the motor.\r\n- `openCurtain()`: Opens the curtain until the top IR sensor is triggered.\r\n- `closeCurtain()`: Closes the curtain until the bottom IR sensor is triggered.\r\n- `setup()`: Initializes the I/O pins and stops the motor.\r\n- `main()`: Main loop that continuously reads the light sensor and controls the curtain.\r\n\r\n## How to Use\r\n\r\n1. Compile the provided code using MikroC Pro for PIC.\r\n2. Upload the compiled hex file to the PIC16F877A microcontroller.\r\n3. Power the circuit and observe the automatic curtain control based on light levels.\r\n"
  },
  "Hassan220022/cv_mikawi": {
    "name": "cv_mikawi",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2025-04-27T12:53:10",
    "languages": [
      "TeX",
      "Makefile",
      "Shell"
    ],
    "readme": "# Hassan-Mikawi-CV\n\nMy curriculum vitae (CV) written using LaTeX. In my CV, you can find my contact information, websites, education, experience, achievements, projects, and skills.\n\nPlease find attached my [CV](https://drive.google.com/file/d/1-6-QggAd16zm_JDZumBXnqX62kKCH7pl/view). 😜\n\n## Run on Terminal\n\n```sh\nmake\n```\n\n## Screenshots\n\n<p align=\"center\">\n    <img alt=\"Screenshot\" src=\"PNG/mikawi_CV.png\"width=\"400\">\n</p>\n\n## Author\n\n👤 **Hassan Mikawi**\n\n* LinkedIn: [Hassan Mikawi](https://www.linkedin.com/in/hassan-mikawi-1314b9238/)\n* GitHub: [@Hassan220022](https://github.com/Hassan220022)\n"
  },
  "Hassan220022/dice": {
    "name": "dice",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2023-05-05T06:45:06",
    "languages": [
      "Java"
    ],
    "readme": "# Dice Roller\n\nThe Dice Roller is a Java program that allows users to simulate rolling one or more dice. The program has two versions: a command-line version and a graphical user interface (GUI) version.\n\n## Command-line version\n\nThe command-line version of the Dice Roller allows users to input the number of dice they want to roll and displays the results of the roll in the console. The program uses the Java standard library's `Random` class to generate random numbers between 1 and 6 for each die roll.\n\n### Usage\n\nTo use the command-line version of the Dice Roller, follow these steps:\n\n1. Compile the `DiceRoller.java` file using a Java compiler such as `javac`:\n\n   ```\n   javac DiceRoller.java\n   ```\n\n2. Run the compiled `DiceRoller` class using the Java Virtual Machine (JVM):\n\n   ```\n   java DiceRoller\n   ```\n\n3. Input the number of dice you want to roll when prompted by the program. The program will display the result of each roll in the console.\n\n## GUI version\n\nThe GUI version of the Dice Roller provides a graphical user interface for users to input the number of dice they want to roll and displays the results of the roll in a label on the screen. The program uses Java's Swing library to create the GUI components and the `Random` class to generate the random numbers for each die roll.\n\n### Usage\n\nTo use the GUI version of the Dice Roller, follow these steps:\n\n1. Compile the `DiceRollerGUI.java` file using a Java compiler such as `javac`:\n\n   ```\n   javac DiceRollerGUI.java\n   ```\n\n2. Run the compiled `DiceRollerGUI` class using the Java Virtual Machine (JVM):\n\n   ```\n   java DiceRollerGUI\n   ```\n\n3. Input the number of dice you want to roll into the text field provided in the GUI.\n\n4. Click the \"Roll the dice!\" button to initiate the roll. The program will display the result of each roll in the label below the button.\n\n## License\n\nThe Dice Roller is released under the [MIT License](https://opensource.org/licenses/MIT).\n"
  },
  "Hassan220022/Fix_My_Code_Challenge": {
    "name": "Fix_My_Code_Challenge",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-03-11T13:32:38",
    "languages": [
      "Python"
    ],
    "readme": "# Fix_My_Code_Challengeafd"
  },
  "Hassan220022/g2scv_hack": {
    "name": "g2scv_hack",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2025-05-10T09:15:14",
    "languages": [
      "Python",
      "Cython",
      "C",
      "XSLT",
      "C++",
      "PowerShell",
      "Shell"
    ],
    "readme": ""
  },
  "Hassan220022/Google-flutter-learning-project-with-bonus-Q": {
    "name": "Google-flutter-learning-project-with-bonus-Q",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2023-04-16T05:40:03",
    "languages": [
      "C++",
      "CMake",
      "Dart",
      "HTML",
      "C",
      "Swift",
      "Kotlin",
      "Objective-C"
    ],
    "readme": "# flutter_application_2\n\nA new Flutter project.\n\n## Getting Started\n\nThis project is a starting point for a Flutter application.\n\nA few resources to get you started if this is your first Flutter project:\n\n- [Lab: Write your first Flutter app](https://docs.flutter.dev/get-started/codelab)\n- [Cookbook: Useful Flutter samples](https://docs.flutter.dev/cookbook)\n\nFor help getting started with Flutter development, view the\n[online documentation](https://docs.flutter.dev/), which offers tutorials,\nsamples, guidance on mobile development, and a full API reference.\n"
  },
  "Hassan220022/Hassan220022": {
    "name": "Hassan220022",
    "description": "Config files for my GitHub profile.",
    "stars": 0,
    "forks": 0,
    "last_updated": "2025-05-10T01:27:10",
    "languages": [],
    "readme": "## Full stack Web Developer\n![gitartwork](gitartwork.svg)\n<h1 align=\"center\">Hi 👋, I'm ..</h1>\n<h3 align=\"center\">Computer engineering student at <a herif=\"https://aast.edu/en/index.php\">the Arab Academy for Science, Technology & Maritime Transport.</a></h3>\n<h3 align=\"center\">A passionate software developer from Egypt</h3>\n\n<p align=\"left\"> <img src=\"https://komarev.com/ghpvc/?username=hassan220022&label=Profile%20views&color=0e75b6&style=flat\" alt=\"hassan220022\" /> </p>\n\n- 🔭 I’m currently working on [Full C compiler](https://github.com/Hassan220022/Compiler-Project)\n\n- 📫 How to reach me **hassansherif122202@gmail.com**\n\n<h3 align=\"left\">Connect with me:</h3>\n<p align=\"left\">\n<a href=\"https://www.linkedin.com/in/mikawi\" target=\"blank\"><img align=\"center\" src=\"https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/linked-in-alt.svg\" alt=\"https://www.linkedin.com/in/mikawi\" height=\"30\" width=\"40\" /></a>\n<a href=\"https://www.instagram.com/hassan_sherif____/\" target=\"blank\"><img align=\"center\" src=\"https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/instagram.svg\" alt=\"https://www.instagram.com/hassan_sherif____/\" height=\"30\" width=\"40\" /></a>\n</p>\n\n<h3 align=\"left\">Languages and Tools:</h3>\n<p align=\"left\"> <a href=\"https://www.arduino.cc/\" target=\"_blank\" rel=\"noreferrer\"> <img src=\"https://cdn.worldvectorlogo.com/logos/arduino-1.svg\" alt=\"arduino\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.gnu.org/software/bash/\" target=\"_blank\" rel=\"noreferrer\"> <img src=\"https://www.vectorlogo.zone/logos/gnu_bash/gnu_bash-icon.svg\" alt=\"bash\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.cprogramming.com/\" target=\"_blank\" rel=\"noreferrer\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/c/c-original.svg\" alt=\"c\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.w3schools.com/cs/\" target=\"_blank\" rel=\"noreferrer\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/csharp/csharp-original.svg\" alt=\"csharp\" width=\"40\" height=\"40\"/> </a> <a href=\"https://dart.dev\" target=\"_blank\" rel=\"noreferrer\"> <img src=\"https://www.vectorlogo.zone/logos/dartlang/dartlang-icon.svg\" alt=\"dart\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"noreferrer\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/docker/docker-original-wordmark.svg\" alt=\"docker\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.figma.com/\" target=\"_blank\" rel=\"noreferrer\"> <img src=\"https://www.vectorlogo.zone/logos/figma/figma-icon.svg\" alt=\"figma\" width=\"40\" height=\"40\"/> </a> <a href=\"https://flutter.dev\" target=\"_blank\" rel=\"noreferrer\"> <img src=\"https://www.vectorlogo.zone/logos/flutterio/flutterio-icon.svg\" alt=\"flutter\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.framer.com/\" target=\"_blank\" rel=\"noreferrer\"> <img src=\"https://www.vectorlogo.zone/logos/framer/framer-icon.svg\" alt=\"framer\" width=\"40\" height=\"40\"/> </a> <a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noreferrer\"> <img src=\"https://www.vectorlogo.zone/logos/git-scm/git-scm-icon.svg\" alt=\"git\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noreferrer\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/java/java-original.svg\" alt=\"java\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.linux.org/\" target=\"_blank\" rel=\"noreferrer\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/linux/linux-original.svg\" alt=\"linux\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.nginx.com\" target=\"_blank\" rel=\"noreferrer\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/nginx/nginx-original.svg\" alt=\"nginx\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.python.org\" target=\"_blank\" rel=\"noreferrer\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/python/python-original.svg\" alt=\"python\" width=\"40\" height=\"40\"/> </a> <a href=\"https://pytorch.org/\" target=\"_blank\" rel=\"noreferrer\"> <img src=\"https://www.vectorlogo.zone/logos/pytorch/pytorch-icon.svg\" alt=\"pytorch\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.tensorflow.org\" target=\"_blank\" rel=\"noreferrer\"> <img src=\"https://www.vectorlogo.zone/logos/tensorflow/tensorflow-icon.svg\" alt=\"tensorflow\" width=\"40\" height=\"40\"/> </a> </p>\n\n<p><img align=\"left\" src=\"https://github-readme-stats.vercel.app/api/top-langs?username=hassan220022&show_icons=true&locale=en&layout=compact\" alt=\"hassan220022\" /></p>\n\n<p>&nbsp;<img align=\"center\" src=\"https://github-readme-stats.vercel.app/api?username=hassan220022&show_icons=true&locale=en\" alt=\"hassan220022\" /></p>\n"
  },
  "Hassan220022/Hyper-Market-Management-System": {
    "name": "Hyper-Market-Management-System",
    "description": "Manage your market with ease using our Hyper Market Management System! This Java-based system has modules for admins, marketers, inventory managers, sellers, and users. It's still under development, but it's already functional and can be used to manage a large market.",
    "stars": 1,
    "forks": 0,
    "last_updated": "2024-05-04T01:50:16",
    "languages": [
      "Java"
    ],
    "readme": "# Hyper Market Management System\n\n![Hyper Market Management System](shopping-cart.ico)\n\n**Revolutionize the way you manage your market with our Hyper Market Management System!**\n\nOur system can be installed in large markets to manage sales and purchases with ease. With different user types and roles, you can ensure that your employees have the tools they need to succeed.\n\n## Modules\nOur system contains the following modules:\n\n### Administrative Module\n- Admin has a username and password and can alter them.\n- Admin manages employees (Add - set unique id, password, and type to - new employee, Delete, update, List all Employees, search).\n\n### Marketing Module\n- Marketing employees can make reports about products (make queries).\n- Marketing employees make special offers and send them to inventory management.\n\n### Inventory Management Module\n- Inventory employees (Add, Delete, Update, List, Search) Products.\n- The system must send a notification when the amount of product reduces at a special range -set by inventory employees- OR when the expiry date of the product gets close.\n- Manage the Damages items and sales Return.\n\n### Sales Module\n- Seller can (search for product, list all products, make and cancel order).\n\n### User Module\n- All Users can login and logout.\n- Users can update their information except ID.\n- Users can see all previous actions -optional-.\n\n## Implementation Details\nOur system is built with Java for an OOP university course at AAST. The GUI is built with the NetBeans editor. The code was written using dependencies like jBCrypt for password management and FlatLaf for design. The database is on MySQL.\n\n## Installation\nAn executable installer is available in the [releases](https://github.com/OmarAhmed-A/Hyper-Market-Manegment-Semester6/releases) section of this repository.\n\nPackaged using jpackage like so:\n```bash\njpackage --name HyperMarket --input lib --main-jar Hyper-Market-Manegment-Semester6.jar --main-class Main.Main --icon ./shopping-cart.ico --type exe --win-menu --win-shortcut\n```\n\nJoin the revolution and try our Hyper Market Management System today!"
  },
  "Hassan220022/library-management-system": {
    "name": "library-management-system",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-12-01T13:06:58",
    "languages": [
      "Python"
    ],
    "readme": "# Library Management System\n\nA comprehensive Library Management System designed to streamline the process of managing books, users, and their interactions within a library. This application features a user-friendly graphical interface built with Python's Tkinter library and leverages a MySQL database to securely handle data storage and retrieval.\n\n## Table of Contents\n- [Project Description](#project-description)\n- [Prerequisites](#prerequisites)\n- [Setup Instructions](#setup-instructions)\n- [How to Run the Project](#how-to-run-the-project)\n- [Usage](#usage)\n  - [Sign Up](#sign-up)\n  - [Sign In](#sign-in)\n  - [Library Interface](#library-interface)\n  - [Admin Panel](#admin-panel)\n- [Troubleshooting](#troubleshooting)\n- [Security Considerations](#security-considerations)\n- [Future Work and Contributions](#future-work-and-contributions)\n\n## Project Description\n\nThe **Library Management System** is a robust application that facilitates the efficient management of library operations. It enables users to sign up, sign in, search for books, and manage their borrowing activities through an intuitive graphical user interface. Administrators have additional privileges to add or edit book records, ensuring the library's catalog remains up-to-date.\n\n### Key Features\n- **User Authentication:** Secure signup and signin functionalities with hashed password storage.\n- **Book Management:** Allows administrators to add and edit book details.\n- **Search Functionality:** Users can search for books by title or ISBN.\n- **Responsive GUI:** Built with Tkinter for a seamless user experience across platforms.\n\n## Prerequisites\n\nBefore setting up the project, ensure that your system meets the following requirements:\n\n### Software Requirements\n- **Python 3.7 or higher:** [Download Python](https://www.python.org/downloads/)\n- **MySQL Server 5.7 or higher:** [Download MySQL](https://dev.mysql.com/downloads/)\n- **pip:** Python package installer (comes bundled with Python)\n\n### Python Libraries\nInstall the required Python libraries using `pip`:\n\n```bash\npip install mysql-connector-python bcrypt customtkinter\n```\n\n### Operating Systems Supported\n- **Windows 10 or higher**\n- **macOS Catalina or higher**\n- **Linux (Ubuntu, Fedora, etc.)**\n\n## Setup Instructions\n\nFollow these steps to set up the Library Management System on your local machine.\n\n### 1. Clone the Repository\n\n```bash\ngit clone https://github.com/Hassan220022/library-management-system.git\ncd library-management-system\n```\n\n### 2. Set Up the MySQL Database\n\n#### a. Launch MySQL\n\nEnsure that your MySQL server is running. You can start it using the following command based on your OS:\n\n- **macOS:**\n  ```bash\n  brew services start mysql\n  ```\n- **Linux:**\n  ```bash\n  sudo service mysql start\n  ```\n- **Windows:**\n  Start the MySQL service from the Services panel.\n\n#### b. Execute the Database Setup Script\n\nRun the provided SQL script to create the necessary database and tables with dummy data.\n\n```bash\nmysql -u root -p < setup_database.sql\n```\n\n- **Note:** Replace `root` with your MySQL username if different.\n- **Password Prompt:** Enter your MySQL password when prompted.\n\n### 3. Configure Database Credentials\n\nOpen the **gui_lb.py**\nfile and update the database credentials to match your MySQL configuration.\n\n```python\n# Database credentials\nHOST = 'localhost'       # Replace with your MySQL host if different\nUSER = 'root'            # Replace with your MySQL username\nPASSWORD = 'your_password'  # Replace with your MySQL password\nDATABASE = 'libManagement'\n```\n\n### 4. Install Required Python Libraries\n\nEnsure all necessary Python libraries are installed. If not already done, execute:\n\n```bash\npip install mysql-connector-python bcrypt customtkinter\n```\n\n## How to Run the Project\n\nLaunch the application using the Python script provided.\n\n```bash\npython gui_lb.py\n```\n\n### Expected Behavior\n- **Login Interface:** Upon running, a login window appears where users can sign in or sign up.\n- **Library Interface:** After signing in, users can search for books and view available titles.\n- **Admin Panel:** Administrators have access to additional functionalities like adding or editing books.\n\n## Usage\n\n### Sign Up\n\n1. **Navigate to the Sign-Up Section:**\n   - Click on the \"Sign Up\" button in the main window.\n2. **Enter User Details:**\n   - **Username:** Choose a unique username.\n   - **Email:** Provide a valid email address.\n   - **Password:** Create a secure password.\n   - **Role:** Select your role (user or `admin`).\n\n3. **Submit:**\n   - Click the \"Submit\" button to create a new account.\n\n### Sign In\n\n1. **Enter Credentials:**\n   - Provide your username and password.\n2. **Authenticate:**\n   - Click the \"Sign In\" button to access the system.\n3. **Access Granted:**\n   - Upon successful authentication, you will be redirected to the library interface.\n\n### Library Interface\n\n- **Search for Books:**\n  - Use the search bar to find books by title or ISBN.\n- **View Book Details:**\n  - Select a book from the list to view more information.\n\n### Admin Panel\n\n1. **Access Admin Features:**\n   - Only users with the `admin` role can access the admin panel.\n2. **Add New Books:**\n   - Enter the ISBN, title, and author details to add a new book.\n3. **Edit Existing Books:**\n   - Modify the title or author of an existing book by providing its ISBN.\n\n## Troubleshooting\n\n### Common Issues\n\n#### 1. **Database Connection Error**\n\n- **Error Message:** `\"Error: 1045 (28000): Access denied for user 'root'@'localhost'\"`\n- **Solution:**\n  - Verify that the MySQL credentials in gui_lb.py are correct.\n  - Ensure that the MySQL server is running.\n  - Check user privileges for the MySQL user.\n\n#### 2. **Missing Python Libraries**\n\n- **Symptom:** Import errors when running gui_lb.py.\n- **Solution:**\n  - Install the required libraries using:\n    ```bash\n    pip install mysql-connector-python bcrypt customtkinter\n    ```\n\n#### 3. **Password Hashing Issues**\n\n  - **Symptom:** Errors related to password hashing or authentication fails despite correct credentials.\n  - **Solution:**\n  - Ensure that the bcrypt library is installed.\n  - Verify that passwords are being hashed and verified correctly in gui_lb.py.\n\n#### 4. **SQL Syntax Errors**\n\n- **Symptom:** Errors when executing SQL scripts.\n- **Solution:**\n  - Ensure that setup_database.sql is executed without modifications.\n  - Check for typos or unintended changes in the SQL script.\n\n### Additional Help\n\nIf you encounter issues not listed here, please refer to the application's log file app.log for detailed error messages or open an issue in the [GitHub repository](https://github.com/Hassan220022/library-management-system/issues).\n\n## Security Considerations\n\n- **Password Security:**\n  - Passwords are hashed using bcrypt before being stored in the database to ensure they are not stored in plain text.\n- **Database Credentials:**\n  - Avoid hardcoding sensitive information like database passwords. Consider using environment variables or configuration files to manage credentials securely.\n- **Input Validation:**\n  - Implement input validation to prevent SQL injection and other malicious inputs.\n\n## Future Work and Contributions\n\n### Future Enhancements\n\n- **Role-Based Access Control (RBAC):**\n  - Implement more granular permissions for different user roles.\n- **Book Borrowing System:**\n  - Allow users to borrow and return books, tracking due dates and availability.\n- **Reporting Features:**\n  - Generate reports on book inventory, user activity, and borrowing statistics.\n- **User Interface Improvements:**\n  - Enhance the GUI for better user experience and responsiveness.\n\n### Contributing\n\nContributions are welcome! To contribute to the Library Management System, follow these steps:\n\n1. **Fork the Repository:**\n   - Click the \"Fork\" button at the top of the repository page.\n\n2. **Clone the Forked Repository:**\n   ```bash\n   git clone https://github.com/Hassan220022/library-management-system.git\n   cd library-management-system\n   ```\n\n3. **Create a New Branch:**\n   ```bash\n   git checkout -b feature/YourFeatureName\n   ```\n\n4. **Make Your Changes:**\n   - Implement your feature or fix bugs.\n\n5. **Commit Your Changes:**\n   ```bash\n   git commit -m \"Add feature: YourFeatureName\"\n   ```\n\n6. **Push to the Branch:**\n   ```bash\n   git push origin feature/YourFeatureName\n   ```\n\n7. **Open a Pull Request:**\n   - Navigate to the original repository and create a pull request from your forked repository.\n\n### Guidelines\n\n- **Code Quality:** Ensure your code follows best practices and is well-documented.\n- **Testing:** Include tests for new features or bug fixes.\n- **Documentation:** Update the README and other documentation as needed.\n\n## License\n\nThis project is licensed under the [MIT License](LICENSE).\n\n---\n\n*Developed with ❤️  Your Mikawi*\n"
  },
  "Hassan220022/LyriMate": {
    "name": "LyriMate",
    "description": "LyriMate is a simple yet powerful Flutter application that lets you search for songs via the Spotify Web API and display their lyrics (including Arabic) from Lyrics.ovh. It features dynamic dark/light mode toggling, colorful gradients generated from album art, and intuitive navigation between the search results and detailed lyrics views.",
    "stars": 0,
    "forks": 0,
    "last_updated": "2025-01-04T20:58:42",
    "languages": [
      "C++",
      "Dart",
      "CMake",
      "Ruby",
      "Swift",
      "C",
      "HTML",
      "Kotlin",
      "Objective-C"
    ],
    "readme": "# Flutter Song Search & Lyrics App\n\nThis repository contains a **Flutter** application that lets you **search for songs** via the **Spotify Web API** and **display their lyrics** using the **Lyrics.ovh** API. Additionally, the app supports **Dark/Light Mode** toggling directly from the AppBar.\n\n---\n\n## Demo & Screenshots\n\n<div align=\"center\">\n  <img src=\"./demo/dark_mode.png\" alt=\"Dark Mode Home\" width=\"250\" />\n   <img src=\"./demo/test_spotify_api.png\" alt=\"Light Mode Lyrics\" width=\"250\" />\n\n  <img src=\"./demo/dark_mode_lyrics.png\" alt=\"Spotify Search Demo\" width=\"250\" />\n  <img src=\"./demo/test_arabic_no_lyrics.png\" alt=\"Light Mode Home\" width=\"250\" />\n</div>\n\n> **Note:** GitHub may not support inline playback for `.mp4` files; clicking the link will either download or open the video in your browser depending on GitHub’s handling and your browser settings.\n\n---\n\n## Table of Contents\n\n1. [Features](#features)  \n2. [Tech Stack](#tech-stack)  \n3. [Project Structure](#project-structure)  \n4. [Prerequisites](#prerequisites)  \n5. [Setup Instructions](#setup-instructions)  \n6. [Running the App](#running-the-app)  \n7. [Usage Guide](#usage-guide)  \n   - [Searching Tracks](#searching-tracks)  \n   - [Viewing Lyrics](#viewing-lyrics)  \n   - [Dark/Light Mode Toggling](#darklight-mode-toggling)  \n8. [Troubleshooting](#troubleshooting)  \n9. [Contributing](#contributing)  \n10. [License](#license)\n\n---\n\n## Features\n\n- **Search for songs** by keyword (song title, artist name).  \n- **View track details** (title, artist name, album art) returned from Spotify.  \n- **Fetch and display lyrics** from [Lyrics.ovh](https://lyricsovh.docs.apiary.io/).  \n- **Dark/Light Mode** toggle button in the AppBar for quick theme switching.  \n- **Auto-detect RTL** support (e.g., Arabic lyrics) for correct alignment.  \n- **Colorful UI** thanks to the `palette_generator` for creating gradients from album art.\n\n---\n\n## Tech Stack\n\n- **Flutter** (Dart) - UI/UX and app logic.  \n- **Spotify Web API** - Searching for tracks.  \n- **Lyrics.ovh** - Fetching lyrics.  \n- **palette_generator** - Extracting color palettes from images.  \n- **http** - Making network requests.  \n- **flutter_dotenv** - Handling environment variables (Spotify credentials).\n\n---\n\n## Project Structure\n\n```bash\nlib/\n ┣ models/\n ┃  ┗ track.dart            # Data model for a track (title, artist, imageUrl)\n ┣ screens/\n ┃  ┣ home_screen.dart      # Main screen for searching + theme toggle\n ┃  ┗ detail_screen.dart    # Screen for displaying the selected track + lyrics\n ┣ services/\n ┃  ┣ spotify_service.dart  # Handles calls to Spotify (search)\n ┃  ┗ lyrics_service.dart   # Handles calls to Lyrics.ovh (lyrics fetching)\n ┣ widgets/\n ┃  ┣ search_bar.dart       # Custom search bar widget\n ┃  ┗ track_tile.dart       # Widget for rendering a track in a list\n ┗ main.dart                # Entry point of the Flutter app\n```\n\n---\n\n## Prerequisites\n\n1. **Flutter SDK** (v3.x or newer recommended).  \n2. **Android Studio** or **Visual Studio Code** (optional, but recommended).  \n3. **Spotify Developer Account** to obtain **Client ID** and **Client Secret** (for Spotify Web API).  \n4. (Optional) **.env File** using [flutter_dotenv](https://pub.dev/packages/flutter_dotenv) for securely managing environment variables.\n\n---\n\n## Setup Instructions\n\n1. **Clone the Repository**  \n   ```bash\n   git clone https://github.com/Hassan220022/LyriMate.git\n   cd LyriMate\n   ```\n   > If your repository name is different, adjust `cd LyriMate` accordingly.\n\n2. **Create/Update the `.env` File (Optional)**  \n   In the project root, create a new `.env` file:\n   ```dotenv\n   SPOTIFY_CLIENT_ID=YOUR_SPOTIFY_CLIENT_ID\n   SPOTIFY_CLIENT_SECRET=YOUR_SPOTIFY_CLIENT_SECRET\n   ```\n   Ensure `.env` is in your `.gitignore` to avoid committing secrets.\n\n3. **Install Packages**  \n   ```bash\n   flutter pub get\n   ```\n\n4. **Configure SpotifyService**  \n   - Open `lib/services/spotify_service.dart` and ensure your environment variables match or directly insert your client ID/secret.\n\n---\n\n## Running the App\n\n1. **Connect a Device/Emulator**  \n   Ensure you have at least one device available:\n   ```bash\n   flutter devices\n   ```\n\n2. **Run the App**  \n   ```bash\n   flutter run\n   ```\n   Or specify a particular device:\n   ```bash\n   flutter run -d <deviceId>\n   ```\n   Once the build completes, you’ll see the **Home Screen** on your device/emulator.\n\n---\n\n## Usage Guide\n\n### Searching Tracks\n\n1. In the **Home Screen**, type a **song title** or **artist name** in the search bar.  \n2. Tap the **search icon** or press **Enter**.  \n3. A list of track results from Spotify appears.\n\n### Viewing Lyrics\n\n1. Tap on any track to open the **Detail Screen**.  \n2. The app requests lyrics from **Lyrics.ovh**.  \n3. If found, they are displayed line-by-line in a scrollable area.  \n   - RTL (e.g., Arabic) lyrics are automatically aligned Right-to-Left.  \n4. If unavailable, you’ll see an error message (“Lyrics not found”).\n\n### Dark/Light Mode Toggling\n\n- In the **AppBar** on the Home Screen, click the **moon icon** (for dark mode) or **sun icon** (for light mode).  \n- The theme applies to the entire app instantly.  \n- This selection currently resets when the app is restarted (for persistence, you’d need local storage like `SharedPreferences`).\n\n---\n\n## Troubleshooting\n\n- **No Results from Spotify**  \n  - Check your `.env` file credentials.  \n  - Ensure you’ve restarted after updating environment variables.\n- **Lyrics Not Found**  \n  - Lyrics.ovh may not have every track. Try a different query.  \n- **Dark Mode Not Toggling**  \n  - Ensure you have the latest `home_screen.dart` with the icon button in the AppBar.  \n  - Verify your `_toggleTheme` method calls `MyApp.of(context)?.toggleTheme(...)`.  \n- **Build or SDK Errors**  \n  - Run `flutter pub get` again.  \n  - Confirm your Flutter SDK is installed and up to date.\n\n---\n\n## Contributing\n\n1. **Fork** this repository.  \n2. **Create a feature branch** for your changes.  \n3. **Commit** your changes.  \n4. **Push** to your fork.  \n5. **Submit a Pull Request** with a clear description of changes.\n\n---\n\n## License\n\nThis project is available under the [MIT License](LICENSE). You are free to modify and redistribute the code.\n\n---"
  },
  "Hassan220022/micro_project": {
    "name": "micro_project",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-01-04T22:00:13",
    "languages": [
      "Assembly"
    ],
    "readme": "# micro_project"
  },
  "Hassan220022/monty": {
    "name": "monty",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-04-23T23:49:09",
    "languages": [
      "C",
      "MATLAB",
      "Forth"
    ],
    "readme": "\n# Monty Bytecode Interpreter\n\n## Overview\nMonty 0.98 is a scripting language that is first compiled into Monty bytecodes. It relies on a unique stack and uses specific instructions to manipulate it. The goal of this project is to create an interpreter for Monty ByteCodes files, part of a school project to learn about data structures (stacks, queues) and interpreting.\n\n## Features\n- **Basic Stack Operations**: Implements stack operations such as `push`, `pall`, `pint`, `pop`, etc.\n- **Queue Operations**: Supports toggling between stack and queue modes using the `queue` and `stack` commands.\n- **Comprehensive Error Management**: Ensures robust error handling for file I/O, syntax, and runtime errors.\n\n## Installation\n\n### Prerequisites\n- GCC (GNU Compiler Collection)\n- Git for cloning the repository\n\n### Compiling the Program\nClone the repository and compile using GCC with C89 standard flags:\n\n```bash\ngit clone https://github.com/Hassan220022/monty.git\ncd monty\ngcc -Wall -Werror -Wextra -pedantic -std=c89 *.c -o monty\n```\n\n## Usage\nTo run the program with a Monty bytecode file:\n\n```bash\n./monty bytecode_file.m\n```\nReplace `bytecode_file.m` with the path to a valid Monty bytecode file.\n\n### Example\nRun a provided bytecode script:\n\n```bash\n./monty bytecodes/00.m\n```\nThis command executes the Monty commands in the `00.m` file.\n\n## Supported Commands\n- `push <int>`: Pushes an integer onto the stack.\n- `pall`: Prints all the values on the stack from the top.\n- `pint`: Displays the value at the top of the stack.\n- `pop`: Removes the top element of the stack.\n- Other commands include `swap`, `add`, `nop`, etc.\n\n## Contributing\nContributions are welcome! To contribute:\n1. Fork the repository.\n2. Create your feature branch (`git checkout -b feature/AmazingFeature`).\n3. Commit your changes (`git commit -m 'Add some AmazingFeature'`).\n4. Push to the branch (`git push origin feature/AmazingFeature`).\n5. Open a Pull Request.\n\n## License\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Authors\n- **Hassan Mahmoud** - *Initial work* - [Hassan220022](https://github.com/Hassan220022)\n\n## Acknowledgments\n- Thanks to the ALX School for providing the project guidelines.\n- Inspiration from various open-source projects and code snippets.\n\n\n### Customization and Personalization\nThe provided README is structured to reflect your GitHub repository for the Monty interpreter project. Ensure you:\n- Check all links, especially the link to the LICENSE file, which should be valid in your repository.\n- Adjust any project-specific details as necessary.\n- Verify the list of commands and features to match those implemented in your project.\n\nThis README.md file will help users understand how to install, run, and contribute to your Monty interpreter project efficiently."
  },
  "Hassan220022/morse-code": {
    "name": "morse-code",
    "description": "Converts text input into Morse code. Plays the Morse code as beeps using the Windows API. Displays the Morse code equivalent of the input.",
    "stars": 0,
    "forks": 0,
    "last_updated": "2023-12-18T20:05:28",
    "languages": [
      "C++"
    ],
    "readme": "# Morse Code Translator\n\nThis program translates text into Morse code and plays it as sounds using the Windows API.\n\n## Features\n\n- Converts text input into Morse code.\n- Plays the Morse code as beeps using the Windows API.\n- Displays the Morse code equivalent of the input.\n\n## Getting Started\n\n### Prerequisites\n\n- Windows operating system (for Windows API functionality)\n\n### Installation\n\n1. Clone the repository or download the source code.\n2. Compile the source code using a C compiler such as GCC.\n3. Execute the compiled program to run the Morse code translator.\n\n## Usage\n\n1. Launch the program.\n2. Enter the word(s) or phrase you want to translate into Morse code.\n3. Choose whether to change the input.\n4. The program will convert the input into Morse code.\n5. The Morse code will be played as a series of beeps.\n6. The program will display the Morse code equivalent of the input.\n\n## Contributing\n\nContributions are welcome! If you have any suggestions, feature requests, or bug reports, please open an issue on the project repository.\n\n## License\n\nThis project is licensed under the [MIT License](https://opensource.org/licenses/MIT).\n\n## Acknowledgments\n\n- The program utilizes the Windows API for sound playback.\n- Morse code translation logic is based on the standard International Morse code encoding.\n\nFeel free to customize or expand this README file based on your project's specific details and requirements.\n"
  },
  "Hassan220022/OptiVista": {
    "name": "OptiVista",
    "description": "This examines a mobile e-commerce application that enhances the eyewear shopping experience using AR technology and Flutter for cross-platform functionality.",
    "stars": 1,
    "forks": 0,
    "last_updated": "2025-03-06T10:08:38",
    "languages": [
      "Dart",
      "TypeScript",
      "JavaScript",
      "C++",
      "CMake",
      "Ruby",
      "Objective-C",
      "Swift",
      "Java",
      "HTML",
      "C",
      "Shell",
      "CSS",
      "Kotlin"
    ],
    "readme": "# OptiVista: Cross-Platform AR-Enhanced E-Commerce Application for Virtual Eyewear Fitting\n\n<!-- ![OptiVista Banner](https://github.com/Hassan220022/OptiVista/blob/main/assets/banner.png) -->\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Features](#features)\n- [Technologies Used](#technologies-used)\n- [System Architecture](#system-architecture)\n- [Installation](#installation)\n- [Usage](#usage)\n- [Contributing](#contributing)\n- [Authors](#authors)\n- [License](#license)\n- [Acknowledgements](#acknowledgements)\n\n## Overview\n\n**OptiVista** is a cutting-edge, cross-platform mobile e-commerce application designed to revolutionize the online eyewear shopping experience. By leveraging Augmented Reality (AR) technologies, OptiVista allows users to virtually try on eyewear products in real-time, enhancing consumer confidence and reducing return rates. Built with Flutter for seamless cross-platform compatibility, a robust MySQL backend, and advanced AR frameworks (ARKit, ARCore, Unity AR), OptiVista offers an immersive and user-friendly shopping experience.\n\n## Features\n\n- **Cross-Platform Support:** Available on both iOS and Android devices, ensuring a wide reach.\n- **Augmented Reality Try-On:** Real-time virtual try-on of eyewear using AR technologies.\n- **Comprehensive Product Catalog:** Browse a diverse range of eyewear styles, colors, and sizes.\n- **Personalized Recommendations:** Tailored product suggestions based on user preferences and behavior.\n- **Secure Checkout:** Streamlined and secure payment processing with multiple payment gateways.\n- **User Profiles:** Manage user information, preferences, and order history.\n- **Feedback Mechanism:** Provide ratings and reviews for products and AR experiences.\n- **Responsive Design:** Optimized for various screen sizes and orientations.\n- **Accessibility Features:** Includes scalable text, high-contrast modes, and voice-over support.\n\n## Technologies Used\n\n- **Frontend:**\n  - [Flutter](https://flutter.dev/) - For cross-platform mobile UI development.\n- **Backend:**\n  - [MySQL](https://www.mysql.com/) - Relational database management.\n  - [Node.js](https://nodejs.org/) / [PHP](https://www.php.net/) - Server-side scripting.\n- **Augmented Reality:**\n  - [ARKit](https://developer.apple.com/arkit/) - Apple's AR framework for iOS.\n  - [ARCore](https://developers.google.com/ar) - Google's AR framework for Android.\n  - [Unity AR Foundation](https://unity.com/products/unity-arfoundation) - For advanced 3D rendering and cross-platform AR support.\n- **Security:**\n  - [OAuth 2.0](https://oauth.net/2/) - Authentication protocol.\n  - [JWT (JSON Web Tokens)](https://jwt.io/) - Secure token-based authentication.\n  - [TLS](https://www.cloudflare.com/learning/ssl/what-is-tls/) - Data encryption.\n- **Development Tools:**\n  - [Git](https://git-scm.com/) - Version control.\n  - [GitHub Actions](https://github.com/features/actions) - CI/CD pipelines.\n  - [Jira](https://www.atlassian.com/software/jira) / [Trello](https://trello.com/) - Project management.\n\n## System Architecture\n\nOptiVista is built using a layered architecture to ensure scalability, modularity, and seamless integration of diverse technologies.\n\n### Layers\n\n1. **Presentation Layer (Frontend):** Developed with Flutter, responsible for the UI/UX.\n2. **Business Logic Layer:** Handles data processing and application logic, implemented in Flutter and the backend server.\n3. **Data Access Layer (Backend):** Managed by a MySQL database, handling data storage and retrieval.\n4. **Integration Layer (AR Modules):** Integrates ARKit, ARCore, and Unity AR for augmented reality functionalities.\n\n### Architecture Diagram\n\n![System Architecture](https://github.com/Hassan220022/OptiVista/blob/main/assets/system_architecture.png)\n\n## Installation\n\n### Prerequisites\n\n- **Flutter SDK:** [Installation Guide](https://flutter.dev/docs/get-started/install)\n- **Unity:** [Download Unity](https://unity.com/)\n- **MySQL Server:** [Download MySQL](https://dev.mysql.com/downloads/mysql/)\n- **Node.js or PHP:** Depending on backend choice.\n- **Xcode (for iOS development):** Available on Mac App Store.\n- **Android Studio (for Android development):** [Download Android Studio](https://developer.android.com/studio)\n\n### Steps\n\n1. **Clone the Repository:**\n\n   ```bash\n   git clone https://github.com/Hassan220022/OptiVista.git\n   cd OptiVista\n   ```\n\n2. **Setup Backend:**\n\n   - **Using Node.js:**\n\n     ```bash\n     cd backend/nodejs\n     npm install\n     cp .env.example .env\n     # Update .env with your configuration\n     npm start\n     ```\n\n   - **Using PHP:**\n\n     ```bash\n     cd backend/php\n     composer install\n     cp .env.example .env\n     # Update .env with your configuration\n     php -S localhost:8000\n     ```\n\n3. **Setup MySQL Database:**\n\n   - Create a new database:\n\n     ```sql\n     CREATE DATABASE eyewear_ecommerce;\n     ```\n\n   - Import the schema:\n\n     ```bash\n     mysql -u yourusername -p eyewear_ecommerce < backend/schema.sql\n     ```\n\n4. **Configure AR Modules:**\n\n   - **Unity AR:**\n     - Open the Unity project located in `ARModules/UnityAR`.\n     - Build the Unity library for both iOS and Android following [Unity's documentation](https://docs.unity3d.com/Manual/UnityasaLibrary.html).\n\n   - **ARKit and ARCore:**\n     - Ensure platform-specific configurations are set up in the Flutter project using platform channels.\n\n5. **Run the Flutter Application:**\n\n   ```bash\n   cd frontend/flutter_app\n   flutter pub get\n   flutter run\n   ```\n\n## Usage\n\n1. **Launch the App:**\n   - Open the application on your iOS or Android device.\n\n2. **Browse Products:**\n   - Navigate through the product catalog to explore various eyewear options.\n\n3. **Virtual Try-On:**\n   - Select an eyewear product and tap on the \"Try On\" button to activate the AR feature.\n   - Adjust the position and scale of the virtual eyewear as needed.\n\n4. **Checkout:**\n   - Add desired products to the cart and proceed to a secure checkout.\n   - Complete your purchase using supported payment gateways.\n\n5. **Manage Profile:**\n   - Access your profile to view order history, update preferences, and manage account settings.\n\n## Contributing\n\nContributions are welcome! Please follow these steps to contribute:\n\n1. **Fork the Repository**\n2. **Create a Feature Branch**\n\n   ```bash\n   git checkout -b feature/YourFeature\n   ```\n\n3. **Commit Your Changes**\n\n   ```bash\n   git commit -m \"Add your feature\"\n   ```\n\n4. **Push to the Branch**\n\n   ```bash\n   git push origin feature/YourFeature\n   ```\n\n5. **Open a Pull Request**\n\nPlease ensure that your contributions adhere to the project's coding standards and include appropriate tests.\n\n## Authors\n\n- **Hassan Mikawi**\n- **Yehia Hatem**\n- **Mostafa Othman**\n## License\n\nThis project is licensed under the [MIT License](https://github.com/Hassan220022/OptiVista/blob/main/LICENSE).\n\n## Acknowledgements\n\n- [Flutter](https://flutter.dev/)\n- [ARKit](https://developer.apple.com/arkit/)\n- [ARCore](https://developers.google.com/ar)\n- [Unity AR Foundation](https://unity.com/products/unity-arfoundation)\n- [MySQL](https://www.mysql.com/)\n- [Node.js](https://nodejs.org/) / [PHP](https://www.php.net/)\n- [OAuth 2.0](https://oauth.net/2/)\n- [JWT](https://jwt.io/)\n\n---\n\nFor any questions or support, please contact [hassansherif122202@gmail.com](mailto:hassansherif122202@gmail.com)."
  },
  "Hassan220022/Organize-Download-Files": {
    "name": "Organize-Download-Files",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-03-09T18:45:25",
    "languages": [],
    "readme": "# Organize-Download-Files"
  },
  "Hassan220022/pacman": {
    "name": "pacman",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-05-14T17:31:01",
    "languages": [
      "Python"
    ],
    "readme": "# Pacman\n\nWelcome to the 3D Maze Game project, a visually engaging maze exploration game powered by Python and OpenGL. In this game, players navigate Pac-Man through a 3D maze, collecting coins while avoiding walls and obstacles. The project is designed to demonstrate the use of OpenGL for creating interactive 3D environments in Python.\n\n## Features\n\n- **3D Maze Navigation**: Explore a complex maze in three dimensions.\n- **Coin Collection**: Collect regular coins and special Super Coins throughout the maze.\n- **Dynamic Obstacles**: Encounter and avoid dynamically placed obstacles within the maze.\n- **OpenGL Graphics**: Experience smooth and visually appealing graphics rendered using OpenGL.\n\n## Prerequisites\n\nBefore running the game, ensure you have the following installed:\n- Python 3.6 or higher\n- OpenGL libraries\n- GLUT for OpenGL\n\n## Installation\n\n1. **Clone the repository:**\n   ```\n   git clone https://github.com/Hassan220022/pacman.git\n   cd pacman\n   ```\n\n2. **Install Python dependencies:**\n   ```\n   pip install PyOpenGL PyOpenGL_accelerate\n   ```\n\n## Structure\n\n- `main.py`: Main executable script to launch the game.\n- `solid_data.py`: Contains configuration data like colors and levels.\n- `maze.py`: Defines the maze layout and initialization logic.\n- `game_elements.py`: Includes classes for game elements such as Pac-Man, Coin, SuperCoin, and Block.\n- `utils.py`: Utility functions and decorators for performance measurement.\n\n## Usage\n\nTo start the game, navigate to the project directory and run:\n```\npython main.py\n```\nControl Pac-Man using the keyboard arrows or WASD keys to navigate through the maze and collect coins.\n\n## How It Works\n\n- **Maze Generation**: The maze is predefined with walls and paths where Pac-Man can move.\n- **Game Elements**:\n  - **Pac-Man**: Moves around the maze collecting coins.\n  - **Coins**: Placed throughout the maze for Pac-Man to collect.\n  - **Super Coins**: Give Pac-Man special abilities or extra points.\n  - **Blocks**: Represent the walls of the maze.\n- **Rendering**: The game uses OpenGL to render the maze and all interactive elements in 3D.\n\n## Customization\n\nYou can customize the maze by modifying the `maze` array in `maze.py`. Each element of the array represents a cell in the maze where `1` is a wall and `0` is a path.\n"
  },
  "Hassan220022/Personal_website_offical": {
    "name": "Personal_website_offical",
    "description": null,
    "stars": 0,
    "forks": 2,
    "last_updated": "2025-02-21T18:41:40",
    "languages": [
      "TypeScript",
      "Shell",
      "HCL",
      "JavaScript",
      "CSS",
      "HTML"
    ],
    "readme": "# Personal Portfolio Website\n\nA modern, responsive portfolio website built with React, TypeScript, and Tailwind CSS. Features dynamic GitHub repository integration, dark mode support, and a clean, minimalist design.\n\n## 🌟 Features\n\n### Core Features\n- **Dynamic GitHub Integration**: Fetches and displays all repositories with pagination\n- **Responsive Design**: Mobile-first approach with elegant transitions\n- **Dark/Light Mode**: System-aware theme with manual toggle\n- **Search & Filter**: Real-time filtering by name, description, or technology\n- **Modern UI**: Clean design with smooth animations using Framer Motion\n\n### Page Structure\n- **Home**: Personal introduction and journey timeline\n- **Projects**: GitHub repositories with advanced filtering\n- **Resume**: Interactive PDF viewer with download option\n\n## 🛠 Tech Stack\n\n- **Frontend**: React 18 with TypeScript\n- **Styling**: Tailwind CSS with custom theming\n- **State Management**: React Query for API caching\n- **Routing**: React Router v6\n- **Animation**: Framer Motion\n- **Icons**: Lucide React\n- **HTTP Client**: Axios\n- **Build Tool**: Vite\n- **Package Manager**: npm/yarn\n\n## 📁 Project Structure\n\n```\nsrc/\n├── components/\n│   ├── home/\n│   │   ├── Hero.tsx\n│   │   └── JourneySection.tsx\n│   ├── resume/\n│   │   ├── PDFViewer.tsx\n│   │   └── ProfileHeader.tsx\n│   ├── Layout.tsx\n│   ├── ProjectCard.tsx\n│   └── ThemeToggle.tsx\n├── pages/\n│   ├── HomePage.tsx\n│   ├── ProjectsPage.tsx\n│   └── ResumePage.tsx\n├── services/\n│   └── github.ts\n├── styles/\n│   └── theme.css\n├── types/\n│   └── github.ts\n└── App.tsx\n```\n\n## 🚀 Getting Started\n\n### Prerequisites\n- Node.js 16+\n- npm or yarn\n- GitHub personal access token (for API)\n\n### Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/Hassan220022/Personal_website_offical.git\ncd portfolio-website\n```\n\n2. Install dependencies:\n```bash\nnpm install\n# or\nyarn install\n```\n\n3. Create `.env` file:\n```env\nVITE_GITHUB_TOKEN=your_github_token_here\n```\n\n4. Start development server:\n```bash\nnpm run dev\n# or\nyarn dev\n```\n\nVisit `http://localhost:5173`\n\n## 💻 Development\n\n### Key Components\n\n#### Layout (`src/components/Layout.tsx`)\n- Main layout wrapper with responsive navigation\n- Handles mobile menu and theme toggle\n- Implements smooth transitions\n\n#### ProjectsPage (`src/pages/ProjectsPage.tsx`)\n- Manages GitHub repository fetching and caching\n- Implements search and filter functionality\n- Handles loading states and pagination\n\n#### GitHub Service (`src/services/github.ts`)\n- Handles all GitHub API interactions\n- Implements pagination for repository fetching\n- Manages API rate limiting and error handling\n\n### API Integration\n\nThe project uses GitHub's REST API v3 for fetching repositories:\n\n```typescript\nconst getAllRepositories = async (): Promise<Repository[]> => {\n  let page = 1;\n  let hasMore = true;\n  const allRepos: Repository[] = [];\n\n  while (hasMore) {\n    const { data, headers } = await axios.get(\n      `${GITHUB_API}/users/${USERNAME}/repos`,\n      {\n        params: {\n          per_page: PER_PAGE,\n          page,\n          sort: 'updated',\n        },\n      }\n    );\n    allRepos.push(...data);\n    hasMore = headers.link?.includes('rel=\"next\"') ?? false;\n    page++;\n  }\n  return allRepos;\n};\n```\n\n## 🎨 Theming\n\nUses CSS variables for dynamic theming:\n```css\n:root {\n  --background: 0 0% 100%;\n  --foreground: 222.2 84% 4.9%;\n  --card: 0 0% 100%;\n  /* ... other theme variables */\n}\n\n.dark {\n  --background: 222.2 84% 4.9%;\n  --foreground: 210 40% 98%;\n  /* ... dark theme variables */\n}\n```\n\n## 📱 Responsive Design\n\n- Mobile-first approach using Tailwind breakpoints\n- Collapsible navigation for mobile devices\n- Fluid typography and spacing\n- Optimized layout for all screen sizes\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit changes (`git commit -m 'Add amazing feature'`)\n4. Push to branch (`git push origin feature/amazing-feature`)\n5. Open Pull Request\n\n## 📄 License\n\n- [LICENSE.md](LICENSE.md)\n\n## 🔗 Links\n\n- [Live Demo](https://your-portfolio-url.com)\n- [GitHub Repository](https://github.com/yourusername/portfolio-website)\n\n## ✨ Acknowledgments\n\n- Built with [Vite](https://vitejs.dev)\n- Icons by [Lucide](https://lucide.dev)\n- Animations by [Framer Motion](https://www.framer.com/motion)\n"
  },
  "Hassan220022/Printf": {
    "name": "Printf",
    "description": "0x11. C - printf",
    "stars": 0,
    "forks": 0,
    "last_updated": "2023-11-14T17:18:18",
    "languages": [
      "C"
    ],
    "readme": "# Printf\n0x11. C - printf\n"
  },
  "Hassan220022/quran_moblie_app": {
    "name": "quran_moblie_app",
    "description": "Quaran Mobile 7th Weak is a Flutter app that provides an accessible Quranic experience. Users can read, bookmark, and listen to Ayahs, track prayer times, and quickly search topics. With a sleek design and dark/light themes, Quaran Mobile makes engaging with the Quran easy and intuitive, anytime and anywhere",
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-11-09T09:36:23",
    "languages": [
      "Dart",
      "C++",
      "CMake",
      "Ruby",
      "HTML",
      "Swift",
      "C",
      "Kotlin",
      "Objective-C"
    ],
    "readme": "# Quaran Mobile 7th Weak\n\n**Quaran Mobile 7th Weak** is a feature-rich Flutter application designed to provide users with an intuitive and seamless experience for reading, bookmarking, and navigating through the Quran. Whether you're at home or on the go, Quaran Mobile ensures that the sacred texts are always at your fingertips with a sleek and user-friendly interface.\n\n## Table of Contents\n- [Features](#features)\n- [Screenshots](#screenshots)\n- [Getting Started](#getting-started)\n  - [Prerequisites](#prerequisites)\n  - [Installation](#installation)\n- [Usage](#usage)\n- [Project Structure](#project-structure)\n- [Contributing](#contributing)\n- [License](#license)\n- [Acknowledgements](#acknowledgements)\n\n## Features\n- **Surah Reader**: Browse and read all 114 Surahs of the Quran with ease.\n- **Bookmarks**: Mark your favorite Ayahs for quick reference and access them offline.\n- **Audio**: Listen to each ayah when pressing on ayah.\n- **Prayer Time**: Displays prayer times based on the user's location.  Calculates prayer times automatically.\n\n- **Dark & Light Modes**: Choose between dark and light themes to suit your environment.\n- **Search Functionality**: Quickly find specific verses or topics within the Quran.\n- **Responsive Design**: Optimized for various devices and screen sizes, ensuring readability and accessibility.\n\n## Screenshots\n*Coming Soon!*\n\n## Getting Started\nFollow these instructions to get a copy of the project up and running on your local machine for development and testing purposes.\n\n### Prerequisites\nEnsure you have the following installed on your machine:\n- **Flutter SDK**: [Installation Guide](https://flutter.dev/docs/get-started/install)\n- **Dart SDK**: Included with Flutter\n- **IDE**: [Visual Studio Code](https://code.visualstudio.com/) or [Android Studio](https://developer.android.com/studio)\n- **Git**: [Installation Guide](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)\n\n### Installation\n1. **Clone the Repository**\n   ```bash\n   git clone https://github.com/Hassan220022/quaran_mobile_7th_weak.git\n   cd quaran_mobile_7th_weak\n   ```\n\n2. **Install Dependencies**\n   ```bash\n   flutter pub get\n   ```\n\n3. **Run the Application**\n   ```bash\n   flutter run\n   ```\n\n## Usage\n- **Navigating Surahs**: Use the bottom navigation bar to browse through different Surahs.\n- **Bookmarking Ayahs**: Tap the bookmark icon next to an Ayah to save it for quick access.\n- **Switching Themes**: Toggle between dark and light modes using the theme icon in the AppBar.\n- **Searching**: Utilize the search feature to find specific verses or topics within the Quran.\n- **Reading Layout**: Enjoy a clean and responsive reading layout with decorative banners and verse numbering for enhanced readability.\n---"
  },
  "Hassan220022/Shalinda.github.io": {
    "name": "Shalinda.github.io",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2022-12-03T19:31:06",
    "languages": [
      "HTML"
    ],
    "readme": ""
  },
  "Hassan220022/Simple_Shell": {
    "name": "Simple_Shell",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2023-12-14T12:58:31",
    "languages": [
      "C"
    ],
    "readme": "# Simple Shell Project\n\n## Overview\n\nWelcome to the Simple Shell project! This repository contains the code and documentation for our implementation of a Unix-like shell. This project is part of the ALX Software Engineering curriculum and is designed to challenge our skills in programming, C, engineering thinking, and group collaboration.\n\n## Project Guidelines\n\nBefore starting with the code, it is crucial to understand and adhere to the project guidelines outlined by Julien. Please review the [project framework](https://intranet.alxswe.com/concepts/559) and ensure compliance with the specified rules. Integrity and individual understanding are paramount in our learning journey.\n\n## Learning Objectives\n\nBy the end of this project, we aim to achieve the following learning objectives:\n\n- Understand the origins of the Unix operating system and its shell.\n- Identify key figures in the development of Unix, including the designers of the original Unix OS, the first UNIX shell, and the B programming language.\n- Gain knowledge about Ken Thompson and his contributions.\n- Grasp the basics of shell operations, including process identifiers (pid and ppid), process creation, and termination.\n- Differentiate between functions and system calls.\n- Learn how to use the execve system call and manipulate the environment of the current process.\n- Understand the role of the PATH variable in finding programs in the shell.\n- Implement process suspension and comprehend the concept of \"end-of-file\" (EOF).\n\n## Resources\n\nTo enhance our understanding, we will explore the following resources:\n\n- Unix shell\n- Thompson shell\n- Ken Thompson's contributions\n- [Everything you need to know to start coding your own shell](https://intranet.alxswe.com/concepts/64)\n\n## Requirements\n\nOur project adheres to specific requirements, including:\n\n- Editors: vi, vim, emacs\n- Compilation: Ubuntu 20.04 LTS using gcc with specified options\n- Code style: Follow the Betty style; use betty-style.pl and betty-doc.pl for checks\n- No memory leaks\n- README.md file at the root is mandatory\n- AUTHORS file listing all contributors\n- GitHub: One project repository per group, and both partners should understand all code pushed\n\n## Compilation\n\nCompile our shell using the provided gcc command:\n\n```bash\ngcc -Wall -Werror -Wextra -pedantic -std=gnu89 *.c -o hsh\n```\n\n## Testing\n\nOur shell should work in both active and non-active modes. Examples are provided in the project guidelines.\n\n## Conclusion\n\nThe Simple Shell project is an exciting opportunity to apply our skills and deepen our understanding of key programming concepts. Let's focus on understanding the solution path rather than taking shortcuts. Happy coding!\n\n---\n\n_Note: Include any additional information specific to your implementation or project structure as needed._\n"
  },
  "Hassan220022/TerminalArcade": {
    "name": "TerminalArcade",
    "description": "XO Game is a C command-line Tic-Tac-Toe supporting single and multiplayer modes with easy/hard difficulties, a leaderboard, game history, and an additional Hangman game.",
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-11-11T13:37:15",
    "languages": [
      "C",
      "Makefile"
    ],
    "readme": "# XO Game\n\n## Overview\n\n**XO Game** is a command-line-based Tic-Tac-Toe game developed in C. It offers both single-player and multiplayer modes, tracks player statistics through a leaderboard, and maintains a history of all games played. The single-player mode includes both easy and hard difficulty levels, with the hard mode leveraging the Minimax algorithm for optimal gameplay. Additionally, the game features a Hangman mode with varying difficulty levels to enhance the gaming experience.\n\n**This project was developed for the Applied Programming course in Term 3 at [Your University Name].**\n\n## Features\n\n- **Single Player Mode**\n  - **Easy:** The computer makes random moves.\n  - **Hard:** The computer uses the Minimax algorithm with alpha-beta pruning for strategic moves.\n  \n- **Multiplayer Mode**\n  - Play against another human player.\n  \n- **Hangman Mode**\n  - **Easy:** Simple words for casual play.\n  - **Hard:** More complex words for a challenging experience.\n\n- **Leaderboard**\n  - Tracks and displays statistics for both single-player and multiplayer games, including wins and computer losses.\n\n- **Game History**\n  - Records all game outcomes, including player names, game types, and results.\n\n- **Persistent Storage**\n  - Saves game state, leaderboard, and game history to CSV files for continuity between sessions.\n\n## Installation\n\n### Prerequisites\n\n- **C Compiler:** Ensure you have `gcc` installed on your system.\n  \n  - **macOS:**\n    ```bash\n    brew install gcc\n    ```\n  \n  - **Ubuntu/Debian:**\n    ```bash\n    sudo apt-get update\n    sudo apt-get install build-essential\n    ```\n  \n- **Make:** Required to compile the project using the provided Makefile.\n  \n  - **macOS:**\n    ```bash\n    brew install make\n    ```\n  \n  - **Ubuntu/Debian:**\n    ```bash\n    sudo apt-get install make\n    ```\n\n### Clone the Repository\n\n```bash\ngit clone https://github.com/yourusername/xo_game.git\ncd xo_game\n```\n\n## Compilation\n\nUse the provided Makefile to compile the project.\n\n```bash\nmake\n```\n\nThis command will generate an executable named `xo_game` in the project directory.\n\n### Cleaning Up\n\nTo remove compiled object files:\n\n```bash\nmake clean\n```\n\nTo remove both object files and the executable:\n\n```bash\nmake fclean\n```\n\nTo rebuild the project from scratch:\n\n```bash\nmake re\n```\n\n## Usage\n\nRun the executable from the terminal:\n\n```bash\n./xo_game\n```\n\n### Gameplay Options\n\nUpon running, you will see the following menu:\n\n```\n******************************************\n*            Welcome to XO Game          *\n******************************************\n\nSelect an option:\n1. Single Player (Easy)\n2. Single Player (Hard)\n3. Multiplayer\n4. Hangman (Easy)\n5. Hangman (Hard)\n6. View Leaderboard\n7. Exit\n\nEnter your choice:\n```\n\n#### 1. Single Player (Easy)\n\n- Play against the computer.\n- The computer makes random moves.\n\n#### 2. Single Player (Hard)\n\n- Play against the computer.\n- The computer uses the Minimax algorithm for optimal moves.\n\n#### 3. Multiplayer\n\n- Play against another human player.\n\n#### 4. Hangman (Easy)\n\n- Play a simple game of Hangman with easy words.\n\n#### 5. Hangman (Hard)\n\n- Play a challenging game of Hangman with complex words.\n\n#### 6. View Leaderboard\n\n- Displays the current leaderboard with player statistics.\n\n#### 7. Exit\n\n- Saves the current game state and exits the game.\n\n### Making a Move\n\n- When prompted, enter the number corresponding to the position on the game board where you want to place your mark (1-9).\n\n## Dependencies\n\nThis project uses only standard C libraries. No external dependencies are required beyond a C compiler (`gcc`).\n\n- **Standard C Libraries:**\n  - `stdio.h`\n  - `string.h`\n  - `stdlib.h`\n  - `time.h`\n\n## File Structure\n\n- `main.c`: Entry point of the program.\n- `game_init.c`: Initializes and displays the game board.\n- `game_logic.c`: Contains game logic, including checking for winners.\n- `player_actions.c`: Handles player and computer moves, including the Minimax algorithm.\n- `display.c`: Manages displays such as the home page, leaderboard, and game history.\n- `save_load.c`: Handles saving and loading game board, leaderboard, and game history.\n- `main.h`: Header file containing structure definitions, global variables, and function prototypes.\n- `Makefile`: Instructions for compiling the project.\n- `game_board.csv`: Saves the current state of the game board.\n- `leaderboard.csv`: Stores player statistics for single and multiplayer modes.\n- `game_history.csv`: Records the history of all games played.\n\n## Data Files\n\n- **`game_board.csv`**\n  - Stores the current state of the game board.\n  \n- **`leaderboard.csv`**\n  - Contains statistics for both single-player and multiplayer games, including wins and computer wins.\n  \n- **`game_history.csv`**\n  - Logs all games played, detailing game type, player names, and results.\n\nThese files are automatically created and updated in the project directory when you run the game.\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n## Contributing\n\nContributions are welcome! Please follow these steps to contribute:\n\n1. Fork the repository.\n2. Create a new branch for your feature or bugfix.\n3. Commit your changes with descriptive messages.\n4. Submit a pull request detailing your changes.\n\n## Contact\n\nFor any questions or suggestions, please contact [hassansherif122202@gmail.com](mailto:hassansherif122202@gmail.com).\n"
  },
  "Hassan220022/The-Restaurant-Ordering-System": {
    "name": "The-Restaurant-Ordering-System",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-05-11T09:27:45",
    "languages": [
      "C",
      "Makefile"
    ],
    "readme": "# Multi-threaded Restaurant Ordering System\n\n![Assignment B Description](assets/AssignmentDescription.png)\n\n\nThis project implements a multi-threaded restaurant ordering system designed to simulate the interaction between customers, chefs, and waiters in a busy restaurant environment. The system utilizes POSIX threads for concurrent execution and counting semaphores to manage synchronization and ensure efficient resource utilization.\n\n## Features\n\n- **Thread-based Simulation**: Separate threads simulate customers placing orders, chefs preparing those orders, and waiters serving them.\n- **Resource Synchronization**: Uses counting semaphores to manage the number of active threads allowed to perform tasks simultaneously, preventing resource conflicts and ensuring system stability.\n- **Efficient Order Processing**: The implementation ensures that orders are processed in a timely and synchronized manner, closely mimicking a real restaurant's operations.\n\n## Getting Started\n\n### Prerequisites\n\nThis software requires a GCC compiler with support for POSIX threads. It is intended for use on Unix-like operating systems such as Linux and macOS.\n\n### Building the Project\n\nTo compile the application, navigate to the project directory in your terminal and run:\n\n```sh\nmake\n```\n\nThis will create an executable named `restaurant_system`.\n\n### Running the Application\n\nExecute the program with:\n\n```sh\n./restaurant_system\n```\n\nWatch the output in the terminal to see how orders are placed, prepared, and served in a synchronized manner.\n\n## Configuration\n\nThe behavior of the system can be modified by adjusting the semaphore counts and thread numbers defined in `restaurant_system.h`. These parameters control the concurrency levels for customers, chefs, and waiters.\n\n## Code Structure\n\n- **main.c**: Sets up the environment, initializes threads, and starts the simulation.\n- **restaurant_system.c**: Contains the logic executed by each thread type and the synchronization code.\n- **restaurant_system.h**: Defines the interfaces and shared variables for thread functions.\n- **makefile**: Provides commands for compiling and cleaning up the project files.\n\n## Detailed Usage\n\nHere’s an example of what the system's output might look like:\n\n```\nCustomer 1 placed an order.\nChef 0 started cooking order for Customer 1.\nWaiter 1 served order for Customer 1.\n```\n\nThis output reflects the coordinated effort between threads handling different roles within the restaurant.\n\n## Assignment Requirements\n\nThis project meets the following specific requirements from the assignment:\n- **Counting Semaphores**: Used to control access to shared resources such as the ordering queue and the kitchen, ensuring that the system does not allow more concurrent actions than specified.\n- **Multi-threaded Design**: Implements a multi-threaded approach to simulate real-time interactions and processes within a restaurant.\n\n## Contributing\n\nContributions to this project are welcome. You can contribute by refining the synchronization logic, enhancing the simulation fidelity, or extending the system to include more complex scenarios.\n"
  },
  "Hassan220022/vscode-flex-grade": {
    "name": "vscode-flex-grade",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2025-03-04T20:51:44",
    "languages": [
      "TypeScript",
      "JavaScript",
      "Shell",
      "Batchfile"
    ],
    "readme": "# Flex Language Extension for VS Code\n\nThis extension provides support for the Flex programming language in Visual Studio Code, including syntax highlighting, code completion, and execution of Flex programs.\n\n## Features\n\n- Syntax highlighting for Flex files (.lx, .flex, .fx)\n- Run Flex programs directly from VS Code\n- Optional AI-assisted coding and error handling\n- Support for multiple AI models (Qwen, OpenAI, LMStudio)\n- Cross-platform support (Windows, macOS, Linux)\n\n## Installation\n\n### Prerequisites\n\n1. Install [Visual Studio Code](https://code.visualstudio.com/)\n2. Install the [Flex Interpreter](https://flex-lang.org/download) for your operating system\n3. Install [Node.js](https://nodejs.org/) (required for running Flex scripts)\n\n### Installing the Extension\n\n1. Open VS Code\n2. Go to Extensions (Ctrl+Shift+X or Cmd+Shift+X)\n3. Search for \"Flex Language\"\n4. Click \"Install\"\n\n### Post-Installation Setup\n\nAfter installing the extension, you'll need to configure it:\n\n1. Open VS Code settings (File > Preferences > Settings)\n2. Search for \"flex\" to find all Flex-related settings\n3. Set `flex.flexPath` to the directory containing your Flex interpreter's `main.py` file\n4. Optional: Configure AI settings if you want to use AI-assisted features\n\n## Common Installation Issues and Solutions\n\n### Windows Users\n\nWindows users may experience issues with script permissions or path resolution. If you encounter any issues:\n\n1. Run the Windows Fix Script:\n   - Download [windows-fix.js](https://github.com/flex-lang/vscode-flex/raw/main/windows-fix.js)\n   - Open a command prompt and navigate to the download directory\n   - Run `node windows-fix.js`\n\n2. Manual Fix (if the script doesn't work):\n   - Ensure PowerShell execution policy allows script execution:\n     ```powershell\n     Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n     ```\n   - Verify Node.js is in your PATH environment variable\n   - Check that the Flex path in VS Code settings is correctly set\n\n### macOS and Linux Users\n\nIf you experience permission issues on macOS or Linux:\n\n1. Make the script executable:\n   ```bash\n   chmod +x ~/.vscode/extensions/flex-language-*/run-flex.sh\n   ```\n\n2. If the extension can't find the Flex interpreter, set the path manually in VS Code settings:\n   - Go to Settings\n   - Find `flex.flexPath`\n   - Set it to the full path of your Flex interpreter directory\n\n## Usage\n\n### Running Flex Programs\n\n1. Open a Flex file (with extension .lx, .flex, or .fx)\n2. Use one of the following methods to run:\n   - Press F5 to run without AI\n   - Press Shift+F5 to run with AI assistance\n   - Use the Command Palette (Ctrl+Shift+P or Cmd+Shift+P) and select \"Flex: Run File\" or \"Flex: Run File with AI\"\n\n### Stopping Execution\n\n- Press Shift+F6 or use the Command Palette and select \"Flex: Stop Running\"\n\n### AI Configuration\n\nTo use AI features with the extension:\n\n1. Enable AI in settings: Set `flex.ai.enable` to `true`\n2. Choose an AI model:\n   - **Qwen**: Default model, no additional setup required\n   - **OpenAI**: Requires an API key set in `flex.ai.apiKey`\n   - **LMStudio**: Requires LMStudio to be running locally, with the API URL set in `flex.ai.lmstudioUrl`\n\n## Configuration Options\n\n| Setting | Description | Default Value |\n|---------|-------------|---------------|\n| `flex.path` | Path to the Flex runner script | `run-flex.js` |\n| `flex.flexPath` | Path to the Flex interpreter directory | `\"\"` |\n| `flex.ai.enable` | Enable AI features | `false` |\n| `flex.ai.model` | AI model to use (qwen, openai, lmstudio) | `qwen` |\n| `flex.ai.apiKey` | API key for OpenAI | `\"\"` |\n| `flex.ai.lmstudioUrl` | URL for LMStudio API | `http://localhost:1234/v1` |\n\n## Known Issues\n\n- The extension requires the Flex interpreter to be installed separately\n- AI features require specific model availability based on configuration\n- Terminal-based execution may behave differently across operating systems\n- Some special character escape sequences may not work correctly in all shells\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis extension is licensed under the MIT License. See the LICENSE file for details."
  },
  "Hassan220022/weapon-detection-ai": {
    "name": "weapon-detection-ai",
    "description": "This AI model uses YOLOv8 to detect weapons in video streams, enhancing security systems by reducing false positives and improving accuracy. It’s optimized for diverse conditions, ensuring reliable, real-time detection. Ideal for surveillance, it’s tested for high performance in various environments.",
    "stars": 2,
    "forks": 0,
    "last_updated": "2024-05-15T19:00:13",
    "languages": [
      "Jupyter Notebook"
    ],
    "readme": "### README: Weapon Detection AI\n\n---\n\n## Overview\n**Weapon Detection AI** is an advanced security solution designed to enhance surveillance systems by integrating state-of-the-art weapon detection capabilities. Utilizing the robust YOLOv8 model, this AI tool specializes in identifying weapons within video streams, aiming to reduce false positives and maximize detection accuracy.\n\n## Features\n- **High Accuracy**: Leverages the powerful YOLOv8 model to ensure precise weapon detection with minimal false positives.\n- **Real-Time Processing**: Capable of processing live video feeds in real-time, ensuring timely identification of threats.\n- **Optimized for Diverse Conditions**: Tested and refined to perform reliably across various lighting and environmental conditions.\n- **Surveillance Optimization**: Ideal for integration into existing or new surveillance systems in settings such as schools, public spaces, and corporate environments.\n\n## Technical Specifications\n- **Model**: YOLOv8\n- **Platform**: Optimized for Apple Silicon using MPS (Metal Performance Shaders) for enhanced performance on GPU.\n- **Input**: Supports various video stream inputs.\n- **Output**: Provides coordinates of detected weapons within the video frame.\n\n## Installation\nTo set up the Weapon Detection AI on your system, follow these steps:\n\n```bash\n# Clone the repository\ngit clone https://github.com/Hassan220022/weapon-detection-ai.git\n\n# Navigate into the project directory\ncd weapon-detection-ai\n```\n\n## Usage\nTo run the weapon detection model on a video file:\n\n```python\nfrom detector import run_detection\n\n# Path to your video file\nvideo_path = 'path/to/video.mp4'\n\n# Perform detection\nrun_detection(video_path)\n```\n\n---\n"
  },
  "Hassan220022/website.dev": {
    "name": "website.dev",
    "description": "personal website",
    "stars": 0,
    "forks": 0,
    "last_updated": "2024-05-04T03:56:42",
    "languages": [
      "TypeScript",
      "MDX",
      "CSS",
      "JavaScript"
    ],
    "readme": "<div>\n  <h1>\n    Enji Kusnadi\n    &middot;\n    <img src=\"https://img.shields.io/website?style=flat-square&url=https%3A%2F%2Fwww.enji.dev\"/>\n    <img src=\"https://img.shields.io/github/deployments/enjidev/enji.dev/production?label=production&style=flat-square\"/>\n    <img src=\"https://img.shields.io/github/commit-activity/m/enjidev/enji.dev?style=flat-square\"/>\n  </h1>\n</div>\n\nA monorepo for my personal website and projects, built with Turborepo and pnpm.\n\n## 📘 [enji.dev](https://www.enji.dev)\n\nA personal website with a blog, project showcase, and work information.\n\nhttps://user-images.githubusercontent.com/95107212/210668021-fd49431f-85a3-4bd7-bf9e-09639cb38922.mp4\n\n### Tech Stack\n\n- 🚀 Next.js + TypeScript\n- ➰ Framer Motion\n- 🍃 Tailwind CSS\n- ✍ MDX\n\n### Running the Project\n\nTo get started, I recommend [installing pnpm](https://pnpm.io/installation) since it's the package manager used in this repository.\n\nBegin by forking the repository and then cloning it to your local machine:\n\n```\ngit clone <your-fork>\n```\n\nNavigate to the project's root directory:\n\n```\ncd ./enji.dev\n```\n\nNext, copy the development version of the `env` file:\n\n```\ncp ./apps/enji.dev/env.example ./apps/enji.dev/env.local\n```\n\nNow, you have the `env.local` file ready for configuration:\n\n```\nDATABASE_URL = your-database-connection-string\nSALT_IP_ADDRESS = super-secret\n```\n\nFor the `DATABASE_URL` use your database connection string. I personally use the free version of [MongoDB](https://www.mongodb.com/), and you can do the same by creating a database there and [adding the connection string](https://www.mongodb.com/basics/mongodb-connection-string) to the `env.local`.\n\nAs for `SALT_IP_ADDRESS`, feel free to fill it with some of your secret words. It acts as a salt for hashing users' IP addresses.\n\nOnce configuration is complete, still at the root of the project directory, install the required dependencies:\n\n```\npnpm install\n```\n\nFinally, run the project:\n\n```\npnpm dev\n```\n\nNow, your project should be up and running smoothly!\n"
  },
  "Hassan220022/yalla_korah_for_matches_info": {
    "name": "yalla_korah_for_matches_info",
    "description": "yalla korah webscrapping",
    "stars": 0,
    "forks": 0,
    "last_updated": "2023-05-07T17:36:53",
    "languages": [
      "Python"
    ],
    "readme": "# yalla_korah_for_matches_info\nyalla korah webscrapping\n"
  },
  "Hassan220022/ybm_web-scraping": {
    "name": "ybm_web-scraping",
    "description": null,
    "stars": 0,
    "forks": 0,
    "last_updated": "2023-05-08T21:42:37",
    "languages": [
      "Python"
    ],
    "readme": "# Web Scraper for MyIP.MS\n\nThis is a Python script that scrapes website information from [MyIP.MS](https://myip.ms/). The script outputs a CSV file containing the rank, name, and number of visits for each website.\n\n## Getting Started\n\nTo run the script, you'll need Python 3 and the following packages installed:\n\n- requests\n- csv\n- beautifulsoup4\n\nYou can install these packages using pip. For example:\n\n```\npip install requests\npip install beautifulsoup4\n```\n\n## Usage\n\n1. Clone the repository to your local machine\n2. Navigate to the project directory in your terminal or command prompt\n3. Run the script by entering `python scraper.py`\n4. Enter a URL for MyIP.MS when prompted\n5. The script will output a CSV file with the website information in the same directory as the script\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n"
  },
  "Hassan220022/zero_day": {
    "name": "zero_day",
    "description": "This is my first repository as a full-stack engineer",
    "stars": 0,
    "forks": 0,
    "last_updated": "2023-10-26T11:06:40",
    "languages": [],
    "readme": "# zero_day\nThis is my first repository as a full-stack engineer\n"
  }
}